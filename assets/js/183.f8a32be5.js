(window.webpackJsonp=window.webpackJsonp||[]).push([[183],{503:function(s,e,t){"use strict";t.r(e);var a=t(3),r=Object(a.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"reids基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reids基础"}},[s._v("#")]),s._v(" Reids基础")]),s._v(" "),e("h2",{attrs:{id:"_1-认识redis"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-认识redis"}},[s._v("#")]),s._v(" 1. 认识redis")]),s._v(" "),e("h3",{attrs:{id:"_1-1-基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-基本概念"}},[s._v("#")]),s._v(" 1.1 基本概念")]),s._v(" "),e("ol",[e("li",[s._v("redis也有数据库的概念，一个数据库中可以保存一组数据；")]),s._v(" "),e("li",[s._v("各个数据库之间是相互隔离的，当然也可以在不同数据库之间复制数据；")]),s._v(" "),e("li",[s._v("每一个数据库都有一个id号，默认的数据库id为0；")]),s._v(" "),e("li",[s._v("可以使用select命令选择当前使用的数据库：select 1")]),s._v(" "),e("li",[s._v("redis初始化的时候会默认创建16个数据库（这个配置可以在redis配置文件中databases 16）；")]),s._v(" "),e("li",[s._v("特别注意，类似redis的key-value数据库系统，是绝对没有表的概念，可以简单理解为，所有的数据都是乱七八糟的堆在一起的；")])]),s._v(" "),e("h3",{attrs:{id:"_1-2-redis的命令组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-redis的命令组"}},[s._v("#")]),s._v(" 1.2 redis的命令组")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("Redis命令十分丰富，包括的命令组有Cluster、Connection、Geo、Hashes、HyperLogLog、Keys、Lists、Pub/Sub、Scripting、Server、Sets、Sorted Sets、Strings、Transactions一共14个redis命令组两百多个redis命令。每个命令都代表着一种操作，有点类似mysql的命令。")])]),s._v(" "),e("li",[e("p",[s._v("这些命令组可以按功能分为以下几种类型：")]),s._v(" "),e("ol",[e("li",[s._v("对数据的操作：\nStrings、Lists、Sets、SortedSets、Hashes、Geo;  其中Geo可以做附近的人的功能")]),s._v(" "),e("li",[s._v("发布/订阅相关操作：\nPub/Sub")]),s._v(" "),e("li",[s._v("事务控制：\nTransactions")]),s._v(" "),e("li",[s._v("脚本命令；\nScripting")]),s._v(" "),e("li",[s._v("网络连接命令；\nConnection")]),s._v(" "),e("li",[s._v("数据库服务相关命令；\nKeys\nServer\nCluster\nHyperLogLog")])])])]),s._v(" "),e("h2",{attrs:{id:"_2-数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据类型"}},[s._v("#")]),s._v(" 2. 数据类型")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("核心数据类型是  key & value: key用来标记一个数据；redis最突出的特点是提供了5种常用的数据存储类型（value的类型）"),e("strong",[s._v(": String,  List, Set,  SortedSet, Hash")])])]),s._v(" "),e("li",[e("p",[s._v("value表示一个key对应的值；在redis中，value可以是任何内容，redis把所有的value都作为byte处理；所以可以用来"),e("strong",[s._v("保存任何内容")]),s._v("；")])]),s._v(" "),e("li",[e("p",[s._v("一般在key中需要体现出数据模型的结构.最简单数据模型demo:")]),s._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[s._v(" \n\t"),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("key")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("value")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    \t"),e("span",{pre:!0,attrs:{class:"token string-property property"}},[s._v('"id"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    \t"),e("span",{pre:!0,attrs:{class:"token string-property property"}},[s._v('"name"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"swk"')]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//但是上面的key容易产生key覆盖的问题，因为假如多个对象都是用ID做key,  所以一般都是这样做")]),s._v("\n\t"),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("key")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\t"),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("user")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\t"),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("employee")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\t\n\t"),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("value")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\t"),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("employee")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token string-property property"}},[s._v('"id"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token string-property property"}},[s._v('"deptId"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token string-property property"}},[s._v('"name"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"mgr"')]),s._v("\n\t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t"),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("user")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token string-property property"}},[s._v('"id"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token string-property property"}},[s._v('"name"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"swk"')]),s._v("\n\t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br")])])])]),s._v(" "),e("h3",{attrs:{id:"_2-1-string-字符串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-string-字符串"}},[s._v("#")]),s._v(" 2.1 String 字符串")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("底层实现: "),e("strong",[s._v("动态字符串")])])]),s._v(" "),e("li",[e("p",[s._v("redis中最常见的数据类型，内容可以是任何值；")])]),s._v(" "),e("li",[e("p",[s._v("key和value 最大空间为512M")])])]),s._v(" "),e("h4",{attrs:{id:"a-基础命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#a-基础命令"}},[s._v("#")]),s._v(" a. 基础命令")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("set key value：设置一个值；")])]),s._v(" "),e("li",[e("p",[s._v("get key：返回key对应的value；")])]),s._v(" "),e("li",[e("p",[s._v("strlen key：返回key对应的value字符串长度；")])]),s._v(" "),e("li",[e("p",[s._v("append key value：给key对应的value追加值，如果key不存在，相当于set一个新的值；")])]),s._v(" "),e("li",[e("p",[s._v("getrange key start stop：返回key对应value的一个子字符串，位置从start到stop；")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20181213131110473.png",alt:"在这里插入图片描述"}})])]),s._v(" "),e("li",[e("p",[s._v("如果字符串的内容是数值（integer，在redis中，数值也是string），那么有如下常用的操作：")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("incr key：在给定key的value上增加1，并返回增加后的值，redis中的incr是一个原子操作，支持并发；")])]),s._v(" "),e("li",[e("p",[s._v("incrby key value：给定key的value上增加value值，并返回增加后的值，相当于key=key.value+value；这也是一个原子操作；")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20181213131231818.png",alt:"在这里插入图片描述"}})])]),s._v(" "),e("li",[e("p",[s._v("decr：在给定key的value上减少1；")])]),s._v(" "),e("li",[e("p",[s._v("decrby key value：给定key的value上减少value值；")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20181213131335813.png",alt:"在这里插入图片描述"}})])])])])]),s._v(" "),e("h4",{attrs:{id:"b-应用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#b-应用场景"}},[s._v("#")]),s._v(" b. 应用场景")]),s._v(" "),e("ul",[e("li",[e("p",[e("strong",[s._v("缓存功能")]),s._v("：字符串最经典的使用场景，redis最为缓存层，Mysql作为储存层，绝大部分请求数据都是在redis中操作，由于redis具有支撑高并发特性，所以缓存通常能起到加速读写和降低 后端压力的作用。")])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("计数器")]),s._v("：许多运用都会使用redis作为计数的基础工具，他可以实现快速计数、查询缓存的功能。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("视频播放数系统就是使用redis作为视频播放数计数的基础组件。\n比如：优酷视频的播放：incr video:videoId:playTimes\n或者：文章浏览量：incr article:aricleId:clickTimes\n或者粉丝数量：取关 decr author:authorId:fansNumber\n这样的话就能极快的提高视频或者是文章的访问速度\n简单总结就是：能够利用redis在缓存中做统计的工作，省去了在sql联表查询的功夫\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("id生成器")]),s._v("：我们在使用mysql时，把数据存在mysql后，该数据就会自动生成一个自增长的id，这个id肯定是不重复的，那类似这种生成一个不重复的id也可以用redis的string数据结构来做。")])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("分布式锁")])]),s._v(" "),e("blockquote",[e("p",[s._v("SET 命令有个 NX 参数可以实现「key不存在才插入」，可以用它来实现分布式锁：")])]),s._v(" "),e("ul",[e("li",[s._v("如果 key 不存在，则显示插入成功，可以用来表示加锁成功；")]),s._v(" "),e("li",[s._v("如果 key 存在，则会显示插入失败，可以用来表示加锁失败。")])]),s._v(" "),e("p",[s._v("一般而言，还会对分布式锁加上过期时间，分布式锁的命令如下：")]),s._v(" "),e("div",{staticClass:"language-redis line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("SET lock_key unique_value NX PX 10000\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("lock_key 就是 key 键；")]),s._v(" "),e("li",[s._v("unique_value 是客户端生成的唯一的标识；")]),s._v(" "),e("li",[s._v("NX 代表只在 lock_key 不存在时，才对 lock_key 进行设置操作；")]),s._v(" "),e("li",[s._v("PX 10000 表示设置 lock_key 的过期时间为 10s，这是为了避免客户端发生异常而无法释放锁。")])]),s._v(" "),e("p",[s._v("而解锁的过程就是将 lock_key 键删除，但不能乱删，要保证执行操作的客户端就是加锁的客户端。所以，解锁的时候，我们要先判断锁的 unique_value 是否为加锁客户端，是的话，才将 lock_key 键删除。")]),s._v(" "),e("p",[s._v("可以看到，解锁是有两个操作，这时就需要 Lua 脚本来保证解锁的原子性，因为 Redis 在执行 Lua 脚本时，可以以原子性的方式执行，保证了锁释放操作的原子性。")]),s._v(" "),e("div",{staticClass:"language-lua line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-lua"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" 释放锁时，先比较 unique_value 是否相等，避免锁的误释放\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" redis"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"get"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("KEYS"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" ARGV"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" redis"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"del"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("KEYS"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("这样一来，就通过使用 SET 命令和 Lua 脚本在 Redis 单节点上完成了分布式锁的加锁和解锁。")])])]),s._v(" "),e("h4",{attrs:{id:"c-注意事项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-注意事项"}},[s._v("#")]),s._v(" c. 注意事项")]),s._v(" "),e("ul",[e("li",[s._v("如果我们想要输入空格字符，那么只是敲一个空格是无法生效的，必须用双引号包一个空格字符的方式来引入空格")]),s._v(" "),e("li",[s._v("Redis中的区间通常是：前闭后闭")]),s._v(" "),e("li",[s._v("在redis中，数值也是string")])]),s._v(" "),e("h3",{attrs:{id:"_2-2-list-列表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-list-列表"}},[s._v("#")]),s._v(" 2.2 List 列表")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("底层实现: "),e("strong",[s._v("quickList")])])]),s._v(" "),e("li",[e("p",[s._v("List类型是一个链表结构的集合,其主要功能有lpush,lpop,获取元素等.更详细的说,List类型是一个"),e("strong",[s._v("双端链表")]),s._v("的结构,我们可以通过相关操作进行集合的头部或者尾部添加删除元素,list的设计非常简单精巧,即可以作为栈,又可以作为队列.满足绝大多数需求.")])])]),s._v(" "),e("h4",{attrs:{id:"a-基础命令-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#a-基础命令-2"}},[s._v("#")]),s._v(" a. 基础命令")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("lpush key value …：在一个list最前面添加一个或多个元素。")])]),s._v(" "),e("li",[e("p",[s._v("rpush key value …：在一个list最后面添加一个或多个元素。")])]),s._v(" "),e("li",[e("p",[s._v("llen key：返回指定list的元素个数。")])]),s._v(" "),e("li",[e("p",[s._v("lrange key start stop：获取一个list中的指定元素(如果是0，-1则表示从头取到末尾所有元素).")])]),s._v(" "),e("li",[e("p",[s._v("ltrim key start stop：裁剪指定list，剩下的内容从start到stop; 这里相当于对list进行剪裁，剪裁范围以外的元素丢弃")])]),s._v(" "),e("li",[e("p",[s._v("lpop key ：从list最前面弹出一个元素。")])]),s._v(" "),e("li",[e("p",[s._v("rpop key：从list最后面弹出一个元素。")])]),s._v(" "),e("li",[e("p",[s._v("lindex key index：从list中获取索引为index的元素")])])]),s._v(" "),e("h4",{attrs:{id:"b-应用场景-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#b-应用场景-2"}},[s._v("#")]),s._v(" b. 应用场景")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("社区应用: 社区应用是一个很广泛的概念，我们平时用的微博，朋友圈，博客，论坛都算是社区应用，社区应用无非就是一些帖子或状态，然后可以给这些帖子或状态回贴或评论，还有就是可以点赞。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("示例：1，点赞；\n\n1，创建一条微博内容：set user:1:post:91 “hello world”;\n2，点赞：\nlpush post:91:good “kobe.png”\nlpush post:91:good “jordan.png”\nlpush post:91:good “James.png”\n\n3，查看有多少人点赞: llen post:91:good\n4，查看哪些人点赞：lrange post:91:good 0 -1\n\n示例2：回复\n\n1，创建一条微博内容：set user:1:post:92 “oh my lady gaga”\n2，回复：lpush post:92:reply “heihei”\nlpush post:92:reply “enen”\n5，查询微博的回复：lrange post:92:reply 0 -1\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])])])]),s._v(" "),e("h4",{attrs:{id:"c-注意实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-注意实现"}},[s._v("#")]),s._v(" c. 注意实现")]),s._v(" "),e("ul",[e("li",[s._v("redis中的range是前后闭合的;")])]),s._v(" "),e("h3",{attrs:{id:"_2-3-set-集合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-set-集合"}},[s._v("#")]),s._v(" 2.3 Set 集合")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("底层实现: "),e("strong",[s._v("hash表")])])]),s._v(" "),e("li",[e("p",[s._v("set数据没有顺序，并且每一个值不能重复；")])])]),s._v(" "),e("h4",{attrs:{id:"a-基础命令-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#a-基础命令-3"}},[s._v("#")]),s._v(" a. 基础命令")]),s._v(" "),e("ul",[e("li",[s._v("sadd key member…：给set添加一个或多个元素")]),s._v(" "),e("li",[s._v("scard key：返回set的元素个数")]),s._v(" "),e("li",[s._v("smembers key：返回指定set内所有的元素，以一个list形式返回")]),s._v(" "),e("li",[s._v("srem key member：从set中移除一个给定元素")]),s._v(" "),e("li",[s._v("sismember key member：判断给定的一个元素是否在set中，如果存在，返回1，如果不存在，返回0")]),s._v(" "),e("li",[s._v("srandmember key count: 返回指定set中随机的count个元素")]),s._v(" "),e("li",[s._v("sunion key1 key2…：用key和key…做并集，结果返回一个list;")]),s._v(" "),e("li",[s._v("sdiff key1 key2…：用key1和key2…做差集，结果返回一个list;")]),s._v(" "),e("li",[s._v("sinter key key … ：用key和key…做交集，结果返回一list；")]),s._v(" "),e("li",[s._v("sunionstore destination key key  … ：获取多个key对应的set之间的并集，并保存为新的key值；目标值也是一个set；")])]),s._v(" "),e("h4",{attrs:{id:"b-应用场景-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#b-应用场景-3"}},[s._v("#")]),s._v(" b. 应用场景")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("指纹去重；")])]),s._v(" "),e("li",[e("p",[s._v("用户抽奖")]),s._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[s._v("sadd luckdraws ‘user1’ ‘user2’ ‘user3’ ‘user4’ ‘user5’ ‘user6’ ‘user7’ ‘user8’ ‘user9’ ‘user11’ ‘user12’ ‘user13’\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("）抽"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("个三等奖：\nsrandmember luckdraws "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\nsrem luckdraws "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("user")]),s._v("…\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20210507180115679.png",alt:"image-20210507180115679"}})])]),s._v(" "),e("li",[e("p",[s._v("做set运算（二度好友推荐）")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1）初始化好友圈：\nsadd user:1:friends ‘user:2’ ‘user:3’ ‘user:5’\nsadd user:2:friends ‘user:1’ ‘user:3’ ‘user:6’\nsadd user:3:friends ‘user:1’ ‘user:7’ ‘user:8’\n2）给user1推荐你可能认识的好友：\na、用user1的好友的好友做并集\nsunionstore user:1:groups user:2:friends user:3:friends user:5:friends\nb、用user:1:group和user:1的好友做差集\nsdiffstore user:1:groups user:1:groups user:1:friends\nc、去除自己\nsrem user:1:groups user:1\n3）在user:1:groups中随机推荐指定的好友数\nsrandmember user:1:groups 2\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])])]),s._v(" "),e("li",[e("p",[s._v("做共同关注，se共同爱好好友推荐等等…")])])]),s._v(" "),e("h3",{attrs:{id:"_2-4-sortedset-有序集合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-sortedset-有序集合"}},[s._v("#")]),s._v(" 2.4 SortedSet  有序集合")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("底层实现: "),e("strong",[s._v("跳跃表")]),s._v("+"),e("strong",[s._v("ListPack")])])]),s._v(" "),e("li",[e("p",[s._v("sorted set，每一个"),e("strong",[s._v("添加的值都有一个对应的分数")]),s._v("，放进去的值按照该"),e("strong",[s._v("分数升序")]),s._v("存在一个集合中，可以通过这个分数进行"),e("strong",[s._v("相关排序的操作")]),s._v("。"),e("strong",[s._v("可以避免在SQL中使用Order by语句（十分低效）")])])])]),s._v(" "),e("h4",{attrs:{id:"a-基础命令-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#a-基础命令-4"}},[s._v("#")]),s._v(" a. 基础命令")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("zadd key score member：添加一个带分数的元素，也可以同时添加多个.")])]),s._v(" "),e("li",[e("p",[s._v("zcount key min max ：给定范围分数的元素个数")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20181213151938440.png",alt:"在这里插入图片描述"}})])]),s._v(" "),e("li",[e("p",[s._v("zrank key member ：查询指定元素的分数在整个列表中的排名（从0开始）")])]),s._v(" "),e("li",[e("p",[s._v("zrange key start stop：获取集合中指定范围的元素，按分数升序排序输出")])]),s._v(" "),e("li",[e("p",[s._v("zrevrange key start stop：获取集合中指定范围的元素，按分数降序排序输出")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20181213151957336.png",alt:"在这里插入图片描述"}})])]),s._v(" "),e("li",[e("p",[s._v("zrank key member  查询排名")])]),s._v(" "),e("li",[e("p",[s._v("zincrby key score member：给指定的元素增加指定的分数")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/2018121315270196.png",alt:"在这里插入图片描述"}})])]),s._v(" "),e("li",[e("p",[s._v("zrem key member：移除指定的元素")])])]),s._v(" "),e("h4",{attrs:{id:"b-应用场景-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#b-应用场景-4"}},[s._v("#")]),s._v(" b. 应用场景")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("排行榜：有序集合经典使用场景。例如社交网站需要对用户的帖子或者微博做排行榜")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("按照点击量排行：\n1、初始化数据：\nzadd post:good:sort 1000 post:91 1020 post:92\n\n2、给id为91的帖子增加8000个赞\nzincrby post:good:sort 30 post:91\n\n3、首页推荐10个最热门的帖子\nzrevrange post:good:sort 0 10\n\n4、从帖子点击量排行榜中移除id为91的帖子\nzrem post:good:sort post:91\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])])])]),s._v(" "),e("h3",{attrs:{id:"_2-5-hash-哈希"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-hash-哈希"}},[s._v("#")]),s._v(" 2.5 Hash 哈希")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("底层实现:  "),e("strong",[s._v("ListPack +hash表")])])]),s._v(" "),e("li",[e("p",[s._v("为什么要用Hash?")]),s._v(" "),e("p",[s._v("假如要存储的对象有很多属性，那么为了表示该对象，必然有很多Key来描述该对象，但是接下来的问题就变成了，假如我修改某个值，我是不是还需要把这个对象取出来，再加，是不是很麻烦？所以就有了Hash;")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('user:1:name "swk"\nuser:1:age  500\nuser:1:id   1\n\nuser:1 {id:1,name:"swk",age:500}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("hashes可以理解为一个map，这个map由一对一对的字段和值组成，所以，可以用hashes来保存一个对象：")])])]),s._v(" "),e("h4",{attrs:{id:"a-基本语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#a-基本语法"}},[s._v("#")]),s._v(" a. 基本语法")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("hset key field value:给一个hashes添加一个field和value；")])]),s._v(" "),e("li",[e("p",[s._v("hget key field:可以得到一个hashes中的某一个属性的值：")])]),s._v(" "),e("li",[e("p",[s._v("hgetall key：一次性取出一个hashes中所有的field和value，使用list输出，一个field，一个value有序输出；")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20181213155256928.png",alt:"在这里插入图片描述"}})])]),s._v(" "),e("li",[e("p",[s._v("hmset key field1 value1 field2 value2 field3 value3…:一次性的设置多个值(hashes multiple set)")])]),s._v(" "),e("li",[e("p",[s._v("hmget key field1 field2…：一次性的得到多个字段值(hashes multiple get)，以列表形式返回；")])]),s._v(" "),e("li",[e("p",[s._v("hincrby key field number：给hashes的一个field的value增加一个值(integer)，这个增加操作是原子操作：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20181213155643355.png",alt:"在这里插入图片描述"}})])]),s._v(" "),e("li",[e("p",[s._v("hkeys key：得到一个key的所有fields字段，以list返回：")])]),s._v(" "),e("li",[e("p",[s._v("hdel key fieldh:删除hashes一个指定的filed；")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20181213155820330.png",alt:""}})])])]),s._v(" "),e("h4",{attrs:{id:"b-应用场景-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#b-应用场景-5"}},[s._v("#")]),s._v(" b. 应用场景")]),s._v(" "),e("ul",[e("li",[s._v("hashes使用场景：替代string，以更合理的方式保存对象；")])]),s._v(" "),e("h2",{attrs:{id:"_3-常见系统命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-常见系统命令"}},[s._v("#")]),s._v(" 3. 常见系统命令")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("返回满足的所有键 keys * (可以模糊查询)")]),s._v(" "),e("p",[e("em",[e("strong",[s._v("注：该命令在服务端一定要禁用，顺丰的那位删库跑路的兄弟就是在服务器上敲了这个命令导致服务器产生了雪崩效应")])])])]),s._v(" "),e("li",[e("p",[s._v("del 删除一个key  返回值 1成功,0 失败")])]),s._v(" "),e("li",[e("p",[s._v("exists 是否存在指定key    返回值 1成功,0 失败")])]),s._v(" "),e("li",[e("p",[s._v("expire 设置某个key的过期时间（秒为单位），使用ttl命令查看剩余时间")])]),s._v(" "),e("li",[e("p",[s._v("persist 取消过期时间")])]),s._v(" "),e("li",[e("p",[s._v("select 选择数据库 数据库为0到15(一共16个数据库) 默认进入的是0数据库")])]),s._v(" "),e("li",[e("p",[s._v("move [key] [数据库下标] 将当前数据中的key转移到其他数据库中")])]),s._v(" "),e("li",[e("p",[s._v("randomkey 随机返回数据库里的一个key")])]),s._v(" "),e("li",[e("p",[s._v("rename重命名key")])]),s._v(" "),e("li",[e("p",[s._v("echo 打印名")])]),s._v(" "),e("li",[e("p",[s._v("dbsize 查看数据库的key数量")])]),s._v(" "),e("li",[e("p",[s._v("info 获取数据库信息")])]),s._v(" "),e("li",[e("p",[s._v("config get * 返回所有配置信息")])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("很危险")]),s._v("的两个命令，这里就不演示了，下面两个命令应该在生产环境中禁止使用:")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("flushdb 清空当前数据库")])]),s._v(" "),e("li",[e("p",[s._v("flushall清空所有数据库")])])])])]),s._v(" "),e("h2",{attrs:{id:"_4-redis-与memcache的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-redis-与memcache的区别"}},[s._v("#")]),s._v(" 4. redis 与memcache的区别")]),s._v(" "),e("ul",[e("li",[s._v("Redis拥有更多的数据结构\n"),e("ul",[e("li",[s._v("Redis相比Memcache来说，拥有更多的数据结构和支持更丰富的数据操作，通常在Memcache里，你需要将数据拿到客户端来进行类似的修改，在set进去。这就大大增加了网络IO的次数和体积，在Redis中，这些复杂的操作通常和一般的set/get一样高效。所以，如果需要缓存能够支持更复杂的结构和操作，那么Redis是不错的选择")])])]),s._v(" "),e("li",[s._v("Redis内存利用率对比\n"),e("ul",[e("li",[s._v("使用简单的key-value存储的话，Memcache的内存利用率更高，而Redis采用Hash结构来做key-value存储，由于其组合式的压缩，其内存利用率会高于Memcache")])])]),s._v(" "),e("li",[s._v("性能对比\n"),e("ul",[e("li",[s._v("由于Redis只使用了单核，而Memcache可以使用多核，所以平均每核上Redis在存储小数据比Memcache性能更高，而在100K以上的数据中，Memcache性能更高，虽然Redis最近也在存储大数据的性能上进行优化，但是比起Memcache还有略有逊色。")])])]),s._v(" "),e("li",[s._v("集群模式\n"),e("ul",[e("li",[s._v("Memcache没有原生的集群模式，需要依赖客户端来实现往集群中分片写入数据，但是Redis目前是原生支持cluster模式的。")])])])])])}),[],!1,null,null,null);e.default=r.exports}}]);