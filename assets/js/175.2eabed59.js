(window.webpackJsonp=window.webpackJsonp||[]).push([[175],{495:function(s,a,n){"use strict";n.r(a);var t=n(3),e=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"kingshard简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kingshard简介"}},[s._v("#")]),s._v(" kingshard简介")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("kingshard doc: https://github.com/flike/kingshard/blob/master/README_ZH.md")])]),s._v(" "),a("li",[a("p",[s._v("kingshard是一个由Go开发高性能MySQL Proxy项目，kingshard在满足基本的读写分离的功能上，致力于简化MySQL分库分表操作；能够让DBA通过kingshard轻松平滑地实现MySQL数据库扩容。 "),a("strong",[s._v("kingshard的性能是直连MySQL性能的80%以上")])]),s._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20220427203643853.png",alt:"image-20220427203643853"}})]),s._v(" "),a("li",[a("p",[s._v("现在开源的MySQL Proxy已经有几款了，并且有的已经在生产环境上广泛应用。但这些proxy在sharding方面，都是不能分子表的。也就是说一个node节点只能分一张表。但我们的线上需求通常是这样的：")]),s._v(" "),a("p",[a("strong",[s._v("我有一张非常大的表，行数超过十亿，需要进行拆分处理。假设拆分因子是512。 如果采用单node单数据库的分表方式，那其实这512个子表还是存在一个物理节点上，意义不大。 如果采用他们的sharding功能，就需要512个物理节点，也不现实。 面对这种需求，现有的proxy就不能很好地满足要求了。通常我们希望将512张子表均分在几个MySQL节点上，从而达到系统的横向扩展。")])]),s._v(" "),a("p",[s._v("然而kingshard较好地实现了这种典型的需求。简单来说，kingshard的分表方案采用两级映射的方式：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1.kingshard将该表分成512张子表，例如：test_0000,test_0001,...\ntest_0511。\n2.将shardKey通过hash或range方式定位到其要操作的记录在哪张子表上。\n3.子表落在哪个node上通过配置文件设置。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])])]),s._v(" "),a("h2",{attrs:{id:"mysql-proxy解决的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-proxy解决的问题"}},[s._v("#")]),s._v(" MySQL Proxy解决的问题")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("SQL请求的读写分离")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20220427203900098.png",alt:"image-20220427203900098"}})])]),s._v(" "),a("li",[a("p",[s._v("DB运维与业务代码严重耦合")])])]),s._v(" "),a("h2",{attrs:{id:"kingshard架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kingshard架构"}},[s._v("#")]),s._v(" kingshard架构")]),s._v(" "),a("h3",{attrs:{id:"_1-基础架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基础架构"}},[s._v("#")]),s._v(" 1. 基础架构")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("kingshard采用Go开发，充分地利用了Go语言的并发特性。Go语言在并发方面，做了很好的封装，这大大简化了kingshard的开发工作。kingshard的整体工作流程如下所述：")]),s._v(" "),a("ol",[a("li",[s._v("读取配置文件并启动，在配置文件中设置的监听端口监听客户端请求。")]),s._v(" "),a("li",[s._v("收到客户端连接请求后，启动一个goroutine单独处理该请求。")]),s._v(" "),a("li",[s._v("首选进行登录验证，验证过程完全兼容MySQL认证协议，由于用户名和密码在配置文件中已经设置好，所以可以利用该信息验证连接请求是否合法。 当用户名和密码都正确时，转入下面的步骤，否则返回出错信息给客户端。")]),s._v(" "),a("li",[s._v("认证通过后，客户端发送SQL语句。")]),s._v(" "),a("li",[s._v("kingshard对客户端发送过来的SQL语句，进行词法和语义分析，识别出SQL的类型和生成SQL的路由计划。如果有必要还会改写SQL，然后转发到相应的DB。也有可能不做词法和语义分析直接转发到相应的后端DB。如果转发SQL是分表且跨多个DB，则每个DB对应启动一个goroutine发送SQL和接收该DB返回的结果。")]),s._v(" "),a("li",[s._v("接收并合并结果，然后转发给客户端。")])])]),s._v(" "),a("li",[a("p",[s._v("工作流程")]),s._v(" "),a("img",{staticStyle:{zoom:"40%"},attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20220427210321857.png",alt:"image-20220427210321857"}})]),s._v(" "),a("li",[a("p",[s._v("kingshard整体架构")]),s._v(" "),a("img",{staticStyle:{zoom:"40%"},attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20220427210355408.png",alt:"image-20220427210355408"}})])]),s._v(" "),a("h3",{attrs:{id:"_2-词法和语义分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-词法和语义分析"}},[s._v("#")]),s._v(" 2. 词法和语义分析")]),s._v(" "),a("p",[s._v("要将kingshard的功能做的足够强大，就不得不进行SQL的词法和语义分析。SQL语句的词法分析指的是将SQL语句切分成一个一个的关键字。例如对SQL语句："),a("code",[s._v("select name from stu where id < 13")]),s._v("进行词法分析，得到的结果是："),a("code",[s._v('{"select","name","from","stu","where","id","<","13"}')]),s._v("。 这样做的目的主要为了生成一棵抽象语法树，也就是大家常说的AST(abstract syntax tree),语义分析就是基于这棵语法树来操作的。语义分析的目的主要有以下几个方面：")]),s._v(" "),a("ol",[a("li",[s._v("读写分离，只有识别出SQL语句的类型，才能进行正确的读写分离操作。")]),s._v(" "),a("li",[s._v("数据分片，解析出表名和查询条件，将SQL路由到正确的DB。")]),s._v(" "),a("li",[s._v("SQL黑名单，通过词法和语义分析，也可以快速识别出需要屏蔽的SQL语句。例如，检测到delete语句不带where操作，就可以直接阻断该SQL的转发。")])]),s._v(" "),a("p",[s._v("kingshard并没有考虑完全兼容MySQL所有语法，因为完全兼容MySQL语法会使得词法和语义分析模块变得异常复杂，而且低效。对于DDL语句其实没必要解析，只要能正确转发到后端相应的DB上就可以。")]),s._v(" "),a("p",[s._v("kingshard只对部分DML语句"),a("code",[s._v("（select,update,insert,delete,replace)")]),s._v("进行了解析，这样可以满足绝大部分的分表操作。对于其他语句，kingshard会将其发送到一个默认的DB，或者通过kingshard特有的方式将其发送到指定的DB上，例如： "),a("code",[s._v("/*node2*/insert into stu（id,name) values(12,'xiaoming')")]),s._v(",对于这种带有注释的的sql语句，kingshard能够识别出，然后将这条sql语句发送到node2节点的Master DB上。")]),s._v(" "),a("h3",{attrs:{id:"_3-负载均衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-负载均衡"}},[s._v("#")]),s._v(" 3. 负载均衡")]),s._v(" "),a("p",[s._v("用户使用Mysql Proxy目的很大一部分就是为了降低单台DB的负载，将读压力分担到多台DB上。kingshard支持多个slave，不同的slave可以配置不同的读权重，权重越大分担的读请求越多。kingshard读请求负载均衡采用的是权重轮询调度算法。")]),s._v(" "),a("p",[s._v("大部分系统采用该算法时，都是转发SQL语句时，动态地计算出本次选取DB的序号。然后将读请求的SQL语句发送到该DB。仔细分析一下，这样做其实是没有必要的。因为DB的权重是相对固定的，不会经常变动，所以完全可以计算出一个固定的轮询序列，然后将这个序列保存在一个数组中。这样不需要动态计算，每次读取数组就可以。举个例子来说，在kingshard的node配置项中配置slave选项："),a("code",[s._v("slave:192.168.0.12@2,192.168.0.13@3")]),s._v(" kingshard在读取配置信息初始化系统的时候，就生成了一个轮询数组:[0,0,1,1,1]。在kingshard中会将这个数组打乱顺序，变成：[0,1,1,0,1]。这样就避免了动态计算DB下标的问题，对性能提升有一定帮助。")]),s._v(" "),a("h3",{attrs:{id:"_4-sharding实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-sharding实现"}},[s._v("#")]),s._v(" 4.sharding实现")]),s._v(" "),a("p",[s._v("首选需要介绍两个概念：")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("子表")]),s._v("，在kingshard中一张逻辑上的大表由若干张小的子表组成。例如：将stu表分成stu_0000,stu_0001,stu_0002,stu_0003。 在数据库中stu表是不存在的，它只是一张逻辑上的表。数据库中只存在四张子表（stu_0000,stu_0001,stu_0002,stu_0003）。 发送SQL语句时，kingshard会识别出需要分表的SQL语句，并改写该SQL。例如，客户端发送过来的SQL语句是"),a("code",[s._v("：select name from stu where id =10;")]),s._v(" kingshard收到该SQL语句后，从配置信息中识别出该表是一个Hash类型的分表。根据分表规则，将该SQL改写成："),a("code",[s._v("select name from stu_2 where id =10;")]),s._v(" 然后发送给对应的DB。")]),s._v(" "),a("li",[a("strong",[s._v("Node")]),s._v("，子表分布在各个node上，每个node包含一个maser server和若干个slave server（slave个数可以为0）。写请求会发往该node中master server，读请求会发往该node中的slave server。")])]),s._v(" "),a("p",[s._v("kingshard的sharding采用了两级映射的思想，首选根据SQL语句的分表条件计算出这条SQL语句落在哪个子表上，然后再根据配置信息找到该子表 落在哪个node上。采用两级映射的思想，对于MySQL的扩容和缩容都能很方便地支持。目前kingshard sharding支持insert, delete, select, update和replace语句, 所有这五类操作都支持跨子表。但写操作仅支持单node上的跨子表，select操作则可以跨node，跨子表。")]),s._v(" "),a("p",[s._v("对于有些表没有分表，操作该表的SQL语句会发往default node。或者用户可以选择在SQL语句前面加上注释，指定该SQL要发往的node，kingshard接收到语句后，识别出注释中指定的node，然后将该SQL发往对应node中合适的DB。例如用户发送"),a("code",[s._v("/*node1*/select * from member where id=100")]),s._v(",kingshard接收到该SQL后会将其发送到node1的salve上。这样kingshard就能很好地兼容分表和不分表的各种应用场景了。")]),s._v(" "),a("h3",{attrs:{id:"_5-事务的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-事务的实现"}},[s._v("#")]),s._v(" 5. 事务的实现")]),s._v(" "),a("p",[s._v("所有proxy支持shard后都会面临一个问题：支不支持分布式事务？出于性能和可用性考虑， kingshard只支持单台DB上的事务，不允许跨DB的事务。kingshard处理单DB上的事务流程如下：")]),s._v(" "),a("ol",[a("li",[s._v("用户发送begin语句。")]),s._v(" "),a("li",[s._v("kingshard接收到SQL语句后，将该连接的状态设置为事务。")]),s._v(" "),a("li",[s._v("用户发送DML语句，kingshard识别出语句需要发送到的DB，然后kingshard新建一个与后端DB的连接，利用该连接发送语句。")]),s._v(" "),a("li",[s._v("收取SQL语句的结果后，将连接放回。")]),s._v(" "),a("li",[s._v("kingshard收到下一条SQL语句，判断该SQL是不是发往同一个DB，如果不是则报错。如果是发往同一个DB，则利用该连接发送语句。")]),s._v(" "),a("li",[s._v("收到用户发送的commit语句，将该连接的状态设置为非事务，事务结束。")])]),s._v(" "),a("h3",{attrs:{id:"_6-后端db存活检测"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-后端db存活检测"}},[s._v("#")]),s._v(" 6. 后端DB存活检测")]),s._v(" "),a("p",[s._v("kingshard每个node启动了一个goroutine用于检测后端master和slave的状态。当goroutine持续一段时间（由配置文件中down_after_noalive参数设置）ping不通后端的DB后，会将该DB的状态设置为down，后续kingshard就不会将sql语句发往该DB了。")]),s._v(" "),a("h3",{attrs:{id:"_7-客户端白名单机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-客户端白名单机制"}},[s._v("#")]),s._v(" 7. 客户端白名单机制")]),s._v(" "),a("p",[s._v("有时候用户为了安全考虑，希望只只允许某几台server连接kingshard。在kingshard的配置文件中有一个参数：allow_ips，用于实现客户端白名单机制。当管理员设置了该参数，则意味着只有allow_ips指定的IP能够连接kingshard，其他IP都会被kingshard拒绝连接。如果不设置该参数，则连接kingshard的客户端不受限制。")]),s._v(" "),a("h3",{attrs:{id:"_8-管理端设计和实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-管理端设计和实现"}},[s._v("#")]),s._v(" 8. 管理端设计和实现")]),s._v(" "),a("p",[s._v("kingshard的管理端口复用了工作端口，通过特定的关键字(admin)来标示。kingshard是通过对管理端特定的SQL进行词法和语义分析，将SQL语句解析为一条kingshard可以识别的命令。目前支持平滑上下线master和slave，和查看kingshard配置和后端DB状态。后续打算将web页面集成到管理端，这样用户就可以不用输入命令行操作，而是在网页上操作。大大降低用户使用kingshard的门槛。")]),s._v(" "),a("p",[s._v("上述各个模块都是kingshard中比较核心的模块，通过这篇文章的介绍，我想读者应该对kingshard的架构和实现有了初步的了解。很多功能的设计和实现，都是作者慢慢地摸索和实践。如果有读者对kingshard的设计或实现感兴趣或者对上述设计有不同的想法，欢迎发邮件（flikecn#126.com）给我。")]),s._v(" "),a("h2",{attrs:{id:"主要功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主要功能"}},[s._v("#")]),s._v(" 主要功能")]),s._v(" "),a("h3",{attrs:{id:"_1-基础功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基础功能"}},[s._v("#")]),s._v(" 1. 基础功能")]),s._v(" "),a("ul",[a("li",[s._v("支持SQL读写分离。")]),s._v(" "),a("li",[s._v("支持透明的MySQL连接池，不必每次新建连接。")]),s._v(" "),a("li",[s._v("支持平滑上线DB或下线DB，前端应用无感知。")]),s._v(" "),a("li",[s._v("支持多个slave，slave之间通过权值进行负载均衡。")]),s._v(" "),a("li",[s._v("支持强制读主库。")]),s._v(" "),a("li",[s._v("支持主流语言（java,php,python,C/C++,Go)SDK的mysql的prepare特性。")]),s._v(" "),a("li",[s._v("支持到后端DB的最大连接数限制。")]),s._v(" "),a("li",[s._v("支持SQL日志及慢日志输出。")]),s._v(" "),a("li",[s._v("支持SQL黑名单机制。")]),s._v(" "),a("li",[s._v("支持客户端IP访问白名单机制，只有白名单中的IP才能访问kingshard（支持IP 段）。")]),s._v(" "),a("li",[s._v("支持字符集设置。")]),s._v(" "),a("li",[s._v("支持last_insert_id功能。")]),s._v(" "),a("li",[s._v("支持热加载配置文件，动态修改kingshard配置项（具体参考管理端命令）。")]),s._v(" "),a("li",[s._v("支持以Web API调用的方式管理kingshard。")]),s._v(" "),a("li",[s._v("支持多用户模式，不同用户之间的表是权限隔离的，互不感知。")])]),s._v(" "),a("h3",{attrs:{id:"_2-sharding-分片-功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-sharding-分片-功能"}},[s._v("#")]),s._v(" 2. sharding(分片)功能")]),s._v(" "),a("ul",[a("li",[s._v("支持按整数的hash和range分表方式。")]),s._v(" "),a("li",[s._v("支持按年、月、日维度的时间分表方式。")]),s._v(" "),a("li",[s._v("支持跨节点分表，子表可以分布在不同的节点。")]),s._v(" "),a("li",[s._v("支持跨节点的count,sum,max和min等聚合函数。")]),s._v(" "),a("li",[s._v("支持单个分表的join操作，即支持分表和另一张不分表的join操作。")]),s._v(" "),a("li",[s._v("支持跨节点的order by,group by,limit等操作。")]),s._v(" "),a("li",[s._v("支持将sql发送到特定的节点执行。")]),s._v(" "),a("li",[s._v("支持在单个节点上执行事务，不支持跨多节点的分布式事务。")]),s._v(" "),a("li",[s._v("支持非事务方式更新（insert,delete,update,replace）多个node上的子表。")])]),s._v(" "),a("h3",{attrs:{id:"_3-支持的操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-支持的操作"}},[s._v("#")]),s._v(" 3. 支持的操作")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("目前kingshard sharding支持insert, delete, select, update和replace语句, 所有这五类操作都支持跨子表。但写操作仅支持单node上的跨子表，select操作则可以跨node，跨子表。")])])]),s._v(" "),a("h2",{attrs:{id:"应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[s._v("#")]),s._v(" 应用场景")]),s._v(" "),a("ol",[a("li",[s._v("mysql实例的读扩展: 解决master和slave数据不一致问题")]),s._v(" "),a("li",[s._v("mysql实例的单表水平扩展: 解决单表数据量过大的问题,支持单个分表的join操作，即支持分表和另一张不分表的join操作。")])]),s._v(" "),a("h2",{attrs:{id:"安装kingshard"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装kingshard"}},[s._v("#")]),s._v(" 安装kingshard")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("安装Go语言环境（请使用最新版），具体步骤请Google。")])]),s._v(" "),a("li",[a("p",[s._v("git clone https://github.com/flike/kingshard.git $GOPATH/src/github.com/flike/kingshard")])]),s._v(" "),a("li",[a("p",[s._v("cd src/github.com/flike/kingshard")])]),s._v(" "),a("li",[a("p",[s._v("source ./dev.sh")])]),s._v(" "),a("li",[a("p",[s._v("make")])]),s._v(" "),a("li",[a("p",[s._v("设置配置文件")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# kingshard的地址和端口")]),s._v("\naddr "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:9696\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 连接kingshard的用户名和密码的用户列表")]),s._v("\nuser_list:\n-\n    user "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  kingshard\n    password "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" kingshard\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#kingshard的web API 端口")]),s._v("\nweb_addr "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:9797\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#调用API的用户名和密码")]),s._v("\nweb_user "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" admin\nweb_password "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" admin\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# log级别，[debug|info|warn|error],默认是error")]),s._v("\nlog_level "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" debug\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 打开SQL日志，设置为on;关闭SQL日志，设置为off")]),s._v("\nlog_sql "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" on\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#如果设置了该项，则只输出SQL执行时间超过slow_log_time(单位毫秒)的SQL日志，不设置则输出全部SQL日志")]),s._v("\nslow_log_time "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#日志文件路径，如果不配置则会输出到终端。")]),s._v("\nlog_path "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" /Users/flike/log\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# sql黑名单文件路径")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 所有在该文件中的sql都会被kingshard拒绝转发")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#blacklist_sql_file: /Users/flike/blacklist")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 只允许下面的IP列表连接kingshard，如果不配置则对连接kingshard的IP不做限制。")]),s._v("\nallow_ips: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# kingshard使用的字符集，如果不设置该选项，则kingshard使用utf8作为默认字符集")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#proxy_charset: utf8mb4")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 一个node节点表示mysql集群的一个数据分片，包括一主多从（可以不配置从库）")]),s._v("\nnodes "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("\n-\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#node节点名字")]),s._v("\n    name "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" node1\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 连接池中最大空闲连接数，也就是最多与后端DB建立max_conns_limit个连接")]),s._v("\n    max_conns_limit "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# kingshard连接该node中mysql的用户名和密码，master和slave的用户名和密码必须一致")]),s._v("\n    user "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  kingshard\n    password "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" kingshard\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# master的地址和端口")]),s._v("\n    master "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:3306\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# slave的地址、端口和读权重，@后面的表示该slave的读权重。可不配置slave")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#slave : 192.168.0.12@2,192.168.0.13@3")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#kingshard在300秒内都连接不上mysql，kingshard则会下线该mysql")]),s._v("\n    down_after_noalive "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("300")]),s._v("\n-\n    name "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" node2\n    max_conns_limit "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("\n    user "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("  kingshard\n    password "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" kingshard\n\n    master "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".59.103:3307\n    slave "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("\n    down_after_noalive: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 各用户的分表规则")]),s._v("\nschema_list "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("\n-\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#schema的所属用户名")]),s._v("\n    user: kingshard\n    nodes: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("node1,node2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#分表分布的node名字")]),s._v("\n    nodes: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("node1,node2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#所有未分表的SQL，都会发往默认node。")]),s._v("\n    default: node1\n    shard:\n    -\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#分表使用的db")]),s._v("\n        db "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" kingshard\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#分表名字")]),s._v("\n        table: test_shard_hash\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#分表字段")]),s._v("\n        key: "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#分表分布的node")]),s._v("\n        nodes: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("node1, node2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#分表类型")]),s._v("\n        type: "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("hash")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#子表个数分布，表示node1有4个子表，")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#node2有4个子表。")]),s._v("\n        locations: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4,4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n    -\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#分表使用的db")]),s._v("\n        db "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" kingshard\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#分表名字")]),s._v("\n        table: test_shard_range\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#分表字段")]),s._v("\n        key: "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#分表类型")]),s._v("\n        type: range\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#分表分布的node")]),s._v("\n        nodes: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("node1, node2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#子表个数分布，表示node1有4个子表，")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#node2有4个子表。")]),s._v("\n        locations: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4,4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#表示每个子表包含的最大记录数，也就是说每")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#个子表最多包好10000条记录。即子表1对应的id为[0,10000),子表2[10000,20000)....")]),s._v("\n        table_row_limit: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v("\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br"),a("span",{staticClass:"line-number"},[s._v("101")]),a("br"),a("span",{staticClass:"line-number"},[s._v("102")]),a("br"),a("span",{staticClass:"line-number"},[s._v("103")]),a("br"),a("span",{staticClass:"line-number"},[s._v("104")]),a("br"),a("span",{staticClass:"line-number"},[s._v("105")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("运行kingshard。"),a("code",[s._v("./bin/kingshard -config=etc/ks.yaml")])])])])])}),[],!1,null,null,null);a.default=e.exports}}]);