(window.webpackJsonp=window.webpackJsonp||[]).push([[195],{515:function(t,e,l){"use strict";l.r(e);var i=l(3),s=Object(i.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"文件事件处理器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文件事件处理器"}},[t._v("#")]),t._v(" 文件事件处理器")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Redis基于reactor模式开发了网络事件处理器，这个处理器叫做文件事件处理器，file event handler，这个文件事件处理器是单线程的，因此Redis才叫做单线程的模型，采用IO多路复用机制同时监听多个socket，根据socket上的事件来选择相应的事件处理器来处理这个事件。")])]),t._v(" "),e("li",[e("p",[t._v("文件事件处理器是单线程模式下运行的，但是通过IO多路复用机制监听了多个socket，可以实现高性能的网络通信模型，又可以跟内部的其它单线程的模块进行对接，保证了Redis内部的线程模型的简单性。")])]),t._v(" "),e("li",[e("p",[t._v("文件事件处理器的结构包含4个部分：")]),t._v(" "),e("ul",[e("li",[t._v("多个socket")]),t._v(" "),e("li",[t._v("IO多路复用程序")]),t._v(" "),e("li",[t._v("文件事件分派器")]),t._v(" "),e("li",[t._v("事件处理器")])])]),t._v(" "),e("li",[e("p",[t._v("多个socket可能并发的产生不同的操作，每个操作对应不同的文件事件，但是IO多路复用程序会监听多个socket，但是会把socket放入到一个队列中排队，每次从队列中取出一个socket给事件分派器，事件分派器把socket给对应的时间处理器。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20220616150456.png",alt:"image-20220616150456456"}})])])]),t._v(" "),e("h2",{attrs:{id:"redis-单线程的高并发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis-单线程的高并发"}},[t._v("#")]),t._v(" redis 单线程的高并发")]),t._v(" "),e("ol",[e("li",[t._v("纯内存操作")]),t._v(" "),e("li",[t._v("核心是采用io多路复用机制")]),t._v(" "),e("li",[t._v("单线程反而避免了多线程频繁上下文切换的问题")])]),t._v(" "),e("h2",{attrs:{id:"io多路复用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#io多路复用"}},[t._v("#")]),t._v(" IO多路复用")]),t._v(" "),e("h3",{attrs:{id:"_1-阻塞io"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-阻塞io"}},[t._v("#")]),t._v(" 1. 阻塞IO")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("就像 socket 通信一样, 连接的客户端一直不发数据，那么服务端线程将会一直阻塞在 read 函数上不返回，也无法接受其他客户端连接。就会发生IO阻塞")]),t._v(" "),e("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/1638502588418.gif",alt:"1638502588418"}})])]),t._v(" "),e("h3",{attrs:{id:"_2-非阻塞-io"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-非阻塞-io"}},[t._v("#")]),t._v(" 2. 非阻塞 IO")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("恳请操作系统为我们提供一个非阻塞的 read 函数")]),t._v("。通过轮询或者回调的方法实现")]),t._v(" "),e("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/1638502577323.gif",alt:"1638502577323"}})])]),t._v(" "),e("h3",{attrs:{id:"_3-io多路复用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-io多路复用"}},[t._v("#")]),t._v(" 3. IO多路复用")]),t._v(" "),e("blockquote",[e("p",[t._v("doc: https://mp.weixin.qq.com/s/kebjG5UosHmXa7AKCatSrA")])]),t._v(" "),e("ul",[e("li",[t._v("实现IO多路复用的方法:\n"),e("ul",[e("li",[t._v("select : 通过遍历(系统遍历)的方式实现, select 只能监听 1024 个文件描述符. windows,linux")]),t._v(" "),e("li",[t._v("poll: 通过遍历(系统遍历)的方式实现, 不再有文件描述符数量限制. linux")]),t._v(" "),e("li",[t._v("epoll: 通过回调的方式实现IO多路复用, 没有文件描述符限制, 效率最高. linux")])])])]),t._v(" "),e("h4",{attrs:{id:"_3-1-select"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-select"}},[t._v("#")]),t._v(" 3.1 select")]),t._v(" "),e("blockquote",[e("ol",[e("li",[e("p",[t._v("系统遍历")])]),t._v(" "),e("li",[e("p",[t._v("select 调用需要传入 fd 数组，需要拷贝一份到内核，高并发场景下这样的拷贝消耗的资源是惊人的。（可优化为不复制）")])]),t._v(" "),e("li",[e("p",[t._v("select 在内核层仍然是通过遍历的方式检查文件描述符的就绪状态，是个同步过程，只不过无系统调用切换上下文的开销。（内核层可优化为异步事件通知）")])]),t._v(" "),e("li",[e("p",[t._v("select 仅仅返回可读文件描述符的个数，具体哪个可读还是要用户自己遍历。（可优化为只返回给用户就绪的文件描述符，无需用户做无效的遍历）")])])])]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/1638502585301.gif",alt:"1638502585301"}}),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://img.kancloud.cn/ee/43/ee430296183245bb677144388a458f5e_675x410.png",alt:"img"}}),t._v(" "),e("ul",[e("li",[t._v("我们可以开设一个代收网点，让快递员全部送到代收点。这个网店管理员叫select。这样我们就可以在家休息了，麻烦的事交给select就好了。当有快递的时候，select负责给我们打电话，期间在家休息睡觉就好了。")]),t._v(" "),e("li",[t._v("但select 代收员比较懒，她记不住快递员的单号，还有快递货物的数量。她只会告诉你快递到了，但是是谁到的，你需要挨个快递员问一遍。")])]),t._v(" "),e("h4",{attrs:{id:"_3-2-poll"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-poll"}},[t._v("#")]),t._v(" 3.2 poll")]),t._v(" "),e("blockquote",[e("ul",[e("li",[e("p",[t._v("系统遍历")])]),t._v(" "),e("li",[e("p",[t._v("poll 也是操作系统提供的系统调用函数。")])]),t._v(" "),e("li",[e("p",[t._v("它和 select 的主要区别就是，去掉了 select 只能监听 1024 个文件描述符的限制。")])])])]),t._v(" "),e("h4",{attrs:{id:"_3-2-epoll"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-epoll"}},[t._v("#")]),t._v(" 3.2 epoll")]),t._v(" "),e("blockquote",[e("ol",[e("li",[e("p",[t._v("回调(异步 IO 事件唤醒)")])]),t._v(" "),e("li",[e("p",[t._v("内核中保存一份文件描述符集合，无需用户每次都重新传入，只需告诉内核修改的部分即可。")])]),t._v(" "),e("li",[e("p",[t._v("内核不再通过轮询的方式找到就绪的文件描述符，而是通过异步 IO 事件唤醒。")])]),t._v(" "),e("li",[e("p",[t._v("内核仅会将有 IO 事件的文件描述符返回给用户，用户也无需遍历整个文件描述符集合。")])])])]),t._v(" "),e("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/1638502586963.gif",alt:"1638502586963"}})])}),[],!1,null,null,null);e.default=s.exports}}]);