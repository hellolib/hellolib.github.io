(window.webpackJsonp=window.webpackJsonp||[]).push([[240],{561:function(t,s,a){"use strict";a.r(s);var e=a(3),r=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("ul",[s("li",[t._v("官方地址： https://developers.google.com/protocol-buffers/docs/proto3")])]),t._v(" "),s("h1",{attrs:{id:"定义一个消息类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义一个消息类型"}},[t._v("#")]),t._v(" 定义一个消息类型")]),t._v(" "),s("p",[t._v("先来看一个非常简单的例子。假设你想定义一个“搜索请求”的消息格式，每一个请求含有一个查询字符串、你感兴趣的查询结果所在的页数，以及每一页多少条查询结果。可以采用如下的方式来定义消息类型的.proto文件了：")]),t._v(" "),s("div",{staticClass:"language-protobuf line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("syntax")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"proto3"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SearchRequest")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" query "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v(" page_number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v(" result_per_page "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("ul",[s("li",[t._v("文件的第一行指定了你正在使用proto3语法：如果你没有指定这个，编译器会使用proto2。这个指定语法行必须是文件的非空非注释的第一个行。")]),t._v(" "),s("li",[t._v("SearchRequest消息格式有3个字段，在消息中承载的数据分别对应于每一个字段。其中每个字段都有一个名字和一种类型。")])]),t._v(" "),s("h3",{attrs:{id:"指定字段类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指定字段类型"}},[t._v("#")]),t._v(" 指定字段类型")]),t._v(" "),s("p",[t._v("在上面的例子中，所有字段都是标量类型：两个整型（page_number和result_per_page），一个string类型（query）。当然，你也可以为字段指定其他的合成类型，包括枚举（enumerations）或其他消息类型。")]),t._v(" "),s("h3",{attrs:{id:"分配标识号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分配标识号"}},[t._v("#")]),t._v(" 分配标识号")]),t._v(" "),s("p",[t._v("正如你所见，在消息定义中，每个字段都有唯一的一个数字标识符。这些标识符是用来在消息的二进制格式中识别各个字段的，一旦开始使用就不能够再改变。注：[1,15]之内的标识号在编码的时候会占用一个字节。[16,2047]之内的标识号则占用2个字节。所以应该为那些频繁出现的消息元素保留 [1,15]之内的标识号。切记：要为将来有可能添加的、频繁出现的标识号预留一些标识号。")]),t._v(" "),s("p",[t._v("最小的标识号可以从1开始，最大到2^29 - 1, or 536,870,911。不可以使用其中的[19000－19999]（ (从FieldDescriptor::kFirstReservedNumber 到 FieldDescriptor::kLastReservedNumber)）的标识号， Protobuf协议实现中对这些进行了预留。如果非要在.proto文件中使用这些预留标识号，编译时就会报警。同样你也不能使用早期"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/proto3?hl=zh-cn#reserved",target:"_blank",rel:"noopener noreferrer"}},[t._v("保留"),s("OutboundLink")],1),t._v("的标识号。")]),t._v(" "),s("h3",{attrs:{id:"指定字段规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指定字段规则"}},[t._v("#")]),t._v(" 指定字段规则")]),t._v(" "),s("p",[t._v("所指定的消息字段修饰符必须是如下之一：")]),t._v(" "),s("ul",[s("li",[t._v("singular：一个格式良好的消息应该有0个或者1个这种字段（但是不能超过1个）。")]),t._v(" "),s("li",[t._v("repeated：在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留。\n在proto3中，repeated的标量域默认情况虾使用packed。\n你可以了解更多的pakced属性在"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/encoding?hl=zh-cn#packed",target:"_blank",rel:"noopener noreferrer"}},[t._v("Protocol Buffer 编码"),s("OutboundLink")],1)])]),t._v(" "),s("h3",{attrs:{id:"添加更多消息类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加更多消息类型"}},[t._v("#")]),t._v(" 添加更多消息类型")]),t._v(" "),s("p",[t._v("在一个.proto文件中可以定义多个消息类型。在定义多个相关的消息的时候，这一点特别有用——例如，如果想定义与SearchResponse消息类型对应的回复消息格式的话，你可以将它添加到相同的.proto文件中，如：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("message SearchRequest {\n  string query = 1;\n  int32 page_number = 2;\n  int32 result_per_page = 3;\n}\nmessage SearchResponse {\n ...\n}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("h3",{attrs:{id:"添加注释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加注释"}},[t._v("#")]),t._v(" 添加注释")]),t._v(" "),s("p",[t._v("向.proto文件添加注释，可以使用C/C++/java风格的双斜杠（//） 语法格式，如：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("message SearchRequest {\n  string query = 1;\n  int32 page_number = 2;  // Which page number do we want?\n  int32 result_per_page = 3;  // Number of results to return per page.\n}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h3",{attrs:{id:"保留标识符-reserved"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#保留标识符-reserved"}},[t._v("#")]),t._v(" 保留标识符（Reserved）")]),t._v(" "),s("p",[t._v("如果你通过删除或者注释所有域，以后的用户可以重用标识号当你重新更新类型的时候。如果你使用旧版本加载相同的.proto文件这会导致严重的问题，包括数据损坏、隐私错误等等。现在有一种确保不会发生这种情况的方法就是指定保留标识符（and/or names, which can also cause issues for JSON serialization不明白什么意思），protocol buffer的编译器会警告未来尝试使用这些域标识符的用户。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('message Foo {\n  reserved 2, 15, 9 to 11;\n  reserved "foo", "bar";\n}\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("注：不要在同一行reserved声明中同时声明域名字和标识号")]),t._v(" "),s("h3",{attrs:{id:"从-proto文件生成了什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从-proto文件生成了什么"}},[t._v("#")]),t._v(" 从.proto文件生成了什么？")]),t._v(" "),s("p",[t._v("当用protocol buffer编译器来运行.proto文件时，编译器将生成所选择语言的代码，这些代码可以操作在.proto文件中定义的消息类型，包括获取、设置字段值，将消息序列化到一个输出流中，以及从一个输入流中解析消息。")]),t._v(" "),s("ul",[s("li",[t._v("对C++来说，编译器会为每个.proto文件生成一个.h文件和一个.cc文件，.proto文件中的每一个消息有一个对应的类。")]),t._v(" "),s("li",[t._v("对Java来说，编译器为每一个消息类型生成了一个.java文件，以及一个特殊的Builder类（该类是用来创建消息类接口的）。")]),t._v(" "),s("li",[t._v("对Python来说，有点不太一样——Python编译器为.proto文件中的每个消息类型生成一个含有静态描述符的模块，，该模块与一个元类（metaclass）在运行时（runtime）被用来创建所需的Python数据访问类。")]),t._v(" "),s("li",[t._v("对go来说，编译器会位每个消息类型生成了一个.pd.go文件。")]),t._v(" "),s("li",[t._v("对于Ruby来说，编译器会为每个消息类型生成了一个.rb文件。")]),t._v(" "),s("li",[t._v("javaNano来说，编译器输出类似域java但是没有Builder类")]),t._v(" "),s("li",[t._v("对于Objective-C来说，编译器会为每个消息类型生成了一个pbobjc.h文件和pbobjcm文件，.proto文件中的每一个消息有一个对应的类。")]),t._v(" "),s("li",[t._v("对于C#来说，编译器会为每个消息类型生成了一个.cs文件，.proto文件中的每一个消息有一个对应的类。")])]),t._v(" "),s("blockquote",[s("p",[t._v("你可以从如下的文档链接中获取每种语言更多API。"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/overview?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("API Reference"),s("OutboundLink")],1)])]),t._v(" "),s("h1",{attrs:{id:"标量数值类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标量数值类型"}},[t._v("#")]),t._v(" 标量数值类型")]),t._v(" "),s("p",[t._v("一个标量消息字段可以含有一个如下的类型——该表格展示了定义于.proto文件中的类型，以及与之对应的、在自动生成的访问类中定义的类型：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v(".proto Type")]),t._v(" "),s("th",[t._v("Notes")]),t._v(" "),s("th",[t._v("Python Type")]),t._v(" "),s("th",[t._v("Go Type")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("double")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("float")]),t._v(" "),s("td",[t._v("float64")])]),t._v(" "),s("tr",[s("td",[t._v("float")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("float")]),t._v(" "),s("td",[t._v("float32")])]),t._v(" "),s("tr",[s("td",[t._v("int32")]),t._v(" "),s("td",[t._v("使用变长编码，对于负值的效率很低，如果你的域有可能有负值，请使用sint64替代")]),t._v(" "),s("td",[t._v("int")]),t._v(" "),s("td",[t._v("int32")])]),t._v(" "),s("tr",[s("td",[t._v("uint32")]),t._v(" "),s("td",[t._v("使用变长编码")]),t._v(" "),s("td",[t._v("int")]),t._v(" "),s("td",[t._v("uint32")])]),t._v(" "),s("tr",[s("td",[t._v("uint64")]),t._v(" "),s("td",[t._v("使用变长编码")]),t._v(" "),s("td",[t._v("int")]),t._v(" "),s("td",[t._v("uint64")])]),t._v(" "),s("tr",[s("td",[t._v("sint32")]),t._v(" "),s("td",[t._v("使用变长编码，这些编码在负值时比int32高效的多")]),t._v(" "),s("td",[t._v("int")]),t._v(" "),s("td",[t._v("int32")])]),t._v(" "),s("tr",[s("td",[t._v("sint64")]),t._v(" "),s("td",[t._v("使用变长编码，有符号的整型值。编码时比通常的int64高效。")]),t._v(" "),s("td",[t._v("int")]),t._v(" "),s("td",[t._v("int64")])]),t._v(" "),s("tr",[s("td",[t._v("fixed32")]),t._v(" "),s("td",[t._v("总是4个字节，如果数值总是比总是比228大的话，这个类型会比uint32高效。")]),t._v(" "),s("td",[t._v("int")]),t._v(" "),s("td",[t._v("uint32")])]),t._v(" "),s("tr",[s("td",[t._v("fixed64")]),t._v(" "),s("td",[t._v("总是8个字节，如果数值总是比总是比256大的话，这个类型会比uint64高效。")]),t._v(" "),s("td",[t._v("int")]),t._v(" "),s("td",[t._v("uint64")])]),t._v(" "),s("tr",[s("td",[t._v("sfixed32")]),t._v(" "),s("td",[t._v("总是4个字节")]),t._v(" "),s("td",[t._v("int")]),t._v(" "),s("td",[t._v("int32")])]),t._v(" "),s("tr",[s("td",[t._v("sfixed64")]),t._v(" "),s("td",[t._v("总是8个字节")]),t._v(" "),s("td",[t._v("int")]),t._v(" "),s("td",[t._v("int64")])]),t._v(" "),s("tr",[s("td",[t._v("bool")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("bool")]),t._v(" "),s("td",[t._v("bool")])]),t._v(" "),s("tr",[s("td",[t._v("string")]),t._v(" "),s("td",[t._v("一个字符串必须是UTF-8编码或者7-bit ASCII编码的文本。")]),t._v(" "),s("td",[t._v("str")]),t._v(" "),s("td",[t._v("string")])]),t._v(" "),s("tr",[s("td",[t._v("bytes")]),t._v(" "),s("td",[t._v("可能包含任意顺序的字节数据。")]),t._v(" "),s("td",[t._v("str")]),t._v(" "),s("td",[t._v("[]byte")])])])]),t._v(" "),s("p",[t._v("你可以在文章"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/encoding?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("Protocol Buffer 编码"),s("OutboundLink")],1),t._v("中，找到更多“序列化消息时各种类型如何编码”的信息。")]),t._v(" "),s("ol",[s("li",[t._v("在java中，无符号32位和64位整型被表示成他们的整型对应形似，最高位被储存在标志位中。")]),t._v(" "),s("li",[t._v("对于所有的情况，设定值会执行类型检查以确保此值是有效。")]),t._v(" "),s("li",[t._v("64位或者无符号32位整型在解码时被表示成为ilong，但是在设置时可以使用int型值设定，在所有的情况下，值必须符合其设置其类型的要求。")]),t._v(" "),s("li",[t._v("python中string被表示成在解码时表示成unicode。但是一个ASCIIstring可以被表示成str类型。")]),t._v(" "),s("li",[t._v("Integer在64位的机器上使用，string在32位机器上使用")])]),t._v(" "),s("h1",{attrs:{id:"默认值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#默认值"}},[t._v("#")]),t._v(" 默认值")]),t._v(" "),s("p",[t._v("当一个消息被解析的时候，如果被编码的信息不包含一个特定的singular元素，被解析的对象锁对应的域被设置位一个默认值，对于不同类型指定如下：")]),t._v(" "),s("ul",[s("li",[t._v("对于strings，默认是一个空string")]),t._v(" "),s("li",[t._v("对于bytes，默认是一个空的bytes")]),t._v(" "),s("li",[t._v("对于bools，默认是false")]),t._v(" "),s("li",[t._v("对于数值类型，默认是0")]),t._v(" "),s("li",[t._v("对于枚举，默认是第一个定义的枚举值，必须为0;")]),t._v(" "),s("li",[t._v("对于消息类型（message），域没有被设置，确切的消息是根据语言确定的，详见"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/overview?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("generated code guide"),s("OutboundLink")],1),t._v("\n对于可重复域的默认值是空（通常情况下是对应语言中空列表）。\n注：对于标量消息域，一旦消息被解析，就无法判断域释放被设置为默认值（例如，例如boolean值是否被设置为false）还是根本没有被设置。你应该在定义你的消息类型时非常注意。例如，比如你不应该定义boolean的默认值false作为任何行为的触发方式。也应该注意如果一个标量消息域被设置为标志位，这个值不应该被序列化传输。\n查看"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/overview?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("generated code guide"),s("OutboundLink")],1),t._v("选择你的语言的默认值的工作细节。")])]),t._v(" "),s("h1",{attrs:{id:"枚举"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#枚举"}},[t._v("#")]),t._v(" 枚举")]),t._v(" "),s("p",[t._v("当需要定义一个消息类型的时候，可能想为一个字段指定某“预定义值序列”中的一个值。例如，假设要为每一个SearchRequest消息添加一个 corpus字段，而corpus的值可能是UNIVERSAL，WEB，IMAGES，LOCAL，NEWS，PRODUCTS或VIDEO中的一个。 其实可以很容易地实现这一点：通过向消息定义中添加一个枚举（enum）并且为每个可能的值定义一个常量就可以了。")]),t._v(" "),s("p",[t._v("在下面的例子中，在消息格式中添加了一个叫做Corpus的枚举类型——它含有所有可能的值 ——以及一个类型为Corpus的字段：")]),t._v(" "),s("div",{staticClass:"language-protobuf line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SearchRequest")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" query "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v(" page_number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v(" result_per_page "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Corpus")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    UNIVERSAL "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    WEB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    IMAGES "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    LOCAL "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    NEWS "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    PRODUCTS "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    VIDEO "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("Corpus")]),t._v(" corpus "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("p",[t._v("如你所见，Corpus枚举的第一个常量映射为0：每个枚举类型必须将其第一个类型映射为0，这是因为：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("必须有有一个0值，我们可以用这个0值作为默认值。")])]),t._v(" "),s("li",[s("p",[t._v("这个零值必须为第一个元素，为了兼容proto2语义，枚举类的第一个值总是默认值。\n你可以通过将不同的枚举常量指定位相同的值。如果这样做你需要将allow_alias设定位true，否则编译器会在别名的地方产生一个错误信息。")]),t._v(" "),s("div",{staticClass:"language-protobuf line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EnumAllowingAlias")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("option")]),t._v(" allow_alias "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  UNKNOWN "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  STARTED "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  RUNNING "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EnumNotAllowingAlias")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  UNKNOWN "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  STARTED "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// RUNNING = 1;  // Uncommenting this line will cause a compile error inside Google and a warning message outside.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])])])]),t._v(" "),s("p",[t._v("枚举常量必须在32位整型值的范围内。因为enum值是使用可变编码方式的，对负数不够高效，因此不推荐在enum中使用负数。如上例所示，可以在 一个消息定义的内部或外部定义枚举——这些枚举可以在.proto文件中的任何消息定义里重用。当然也可以在一个消息中声明一个枚举类型，而在另一个不同 的消息中使用它——采用MessageType.EnumType的语法格式。")]),t._v(" "),s("p",[t._v("当对一个使用了枚举的.proto文件运行protocol buffer编译器的时候，生成的代码中将有一个对应的enum（对Java或C++来说），或者一个特殊的EnumDescriptor类（对 Python来说），它被用来在运行时生成的类中创建一系列的整型值符号常量（symbolic constants）。")]),t._v(" "),s("p",[t._v("在反序列化的过程中，无法识别的枚举值会被保存在消息中，虽然这种表示方式需要依据所使用语言而定。在那些支持开放枚举类型超出指定范围之外的语言中（例如C++和Go），为识别的值会被表示成所支持的整型。在使用封闭枚举类型的语言中（Java），使用枚举中的一个类型来表示未识别的值，并且可以使用所支持整型来访问。在其他情况下，如果解析的消息被序列号，未识别的值将保持原样。")]),t._v(" "),s("p",[t._v("关于如何在你的应用程序的消息中使用枚举的更多信息，请查看所选择的语言"),s("a",{attrs:{href:"http://code.google.com/intl/zh-CN/apis/protocolbuffers/docs/reference/overview.html%E3%80%82",target:"_blank",rel:"noopener noreferrer"}},[t._v("generated code guide"),s("OutboundLink")],1)]),t._v(" "),s("h1",{attrs:{id:"使用其他消息类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用其他消息类型"}},[t._v("#")]),t._v(" 使用其他消息类型")]),t._v(" "),s("p",[t._v("你可以将其他消息类型用作字段类型。例如，假设在每一个SearchResponse消息中包含Result消息，此时可以在相同的.proto文件中定义一个Result消息类型，然后在SearchResponse消息中指定一个Result类型的字段，如：")]),t._v(" "),s("div",{staticClass:"language-protobuf line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SearchResponse")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("repeated")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("Result")]),t._v(" results "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Result")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" url "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" title "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("repeated")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" snippets "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("h3",{attrs:{id:"导入定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#导入定义"}},[t._v("#")]),t._v(" 导入定义")]),t._v(" "),s("p",[t._v("在上面的例子中，Result消息类型与SearchResponse是定义在同一文件中的。如果想要使用的消息类型已经在其他.proto文件中已经定义过了呢？")]),t._v(" "),s("p",[t._v("你可以通过导入（importing）其他.proto文件中的定义来使用它们。要导入其他.proto文件的定义，你需要在你的文件中添加一个导入声明，如：")]),t._v(" "),s("p",[t._v("默认情况下你只能使用直接导入的.proto文件中的定义. 然而， 有时候你需要移动一个.proto文件到一个新的位置， 可以不直接移动.proto文件， 只需放入一个伪 .proto 文件在老的位置， 然后使用import public转向新的位置。import public 依赖性会通过任意导入包含import public声明的proto文件传递。例如：")]),t._v(" "),s("p",[t._v("通过在编译器命令行参数中使用"),s("code",[t._v("-I/--proto_path")]),t._v("protocal 编译器会在指定目录搜索要导入的文件。如果没有给出标志，编译器会搜索编译命令被调用的目录。通常你只要指定proto_path标志为你的工程根目录就好。并且指定好导入的正确名称就好。")]),t._v(" "),s("h3",{attrs:{id:"使用proto2消息类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用proto2消息类型"}},[t._v("#")]),t._v(" 使用proto2消息类型")]),t._v(" "),s("p",[t._v("在你的proto3消息中导入proto2的消息类型也是可以的，反之亦然，然后proto2枚举不可以直接在proto3的标识符中使用（如果仅仅在proto2消息中使用是可以的）。")]),t._v(" "),s("h3",{attrs:{id:"嵌套类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#嵌套类型"}},[t._v("#")]),t._v(" 嵌套类型")]),t._v(" "),s("p",[t._v("你可以在其他消息类型中定义、使用消息类型，在下面的例子中，Result消息就定义在SearchResponse消息内，如：")]),t._v(" "),s("div",{staticClass:"language-protobuf line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SearchResponse")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Result")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" url "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" title "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("repeated")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" snippets "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("repeated")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("Result")]),t._v(" results "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("如果你想在它的父消息类型的外部重用这个消息类型，你需要以Parent.Type的形式使用它，如：")]),t._v(" "),s("div",{staticClass:"language-protobuf line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SomeOtherMessage")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("SearchResponse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Result")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"更新一个消息类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新一个消息类型"}},[t._v("#")]),t._v(" 更新一个消息类型")]),t._v(" "),s("p",[t._v("如果一个已有的消息格式已无法满足新的需求——如，要在消息中添加一个额外的字段——但是同时旧版本写的代码仍然可用。不用担心！更新消息而不破坏已有代码是非常简单的。在更新时只要记住以下的规则即可。")]),t._v(" "),s("ul",[s("li",[t._v("不要更改任何已有的字段的数值标识。")]),t._v(" "),s("li",[t._v("如果你增加新的字段，使用旧格式的字段仍然可以被你新产生的代码所解析。你应该记住这些元素的默认值这样你的新代码就可以以适当的方式和旧代码产生的数据交互。相似的，通过新代码产生的消息也可以被旧代码解析：只不过新的字段会被忽视掉。注意，未被识别的字段会在反序列化的过程中丢弃掉，所以如果消息再被传递给新的代码，新的字段依然是不可用的（这和proto2中的行为是不同的，在proto2中未定义的域依然会随着消息被序列化）")]),t._v(" "),s("li",[t._v("非required的字段可以移除——只要它们的标识号在新的消息类型中不再使用（更好的做法可能是重命名那个字段，例如在字段前添加“OBSOLETE_”前缀，那样的话，使用的.proto文件的用户将来就不会无意中重新使用了那些不该使用的标识号）。")]),t._v(" "),s("li",[t._v("int32, uint32, int64, uint64,和bool是全部兼容的，这意味着可以将这些类型中的一个转换为另外一个，而不会破坏向前、 向后的兼容性。如果解析出来的数字与对应的类型不相符，那么结果就像在C++中对它进行了强制类型转换一样（例如，如果把一个64位数字当作int32来 读取，那么它就会被截断为32位的数字）。")]),t._v(" "),s("li",[t._v("sint32和sint64是互相兼容的，但是它们与其他整数类型不兼容。")]),t._v(" "),s("li",[t._v("string和bytes是兼容的——只要bytes是有效的UTF-8编码。")]),t._v(" "),s("li",[t._v("嵌套消息与bytes是兼容的——只要bytes包含该消息的一个编码过的版本。")]),t._v(" "),s("li",[t._v("fixed32与sfixed32是兼容的，fixed64与sfixed64是兼容的。")]),t._v(" "),s("li",[t._v("枚举类型与int32，uint32，int64和uint64相兼容（注意如果值不相兼容则会被截断），然而在客户端反序列化之后他们可能会有不同的处理方式，例如，未识别的proto3枚举类型会被保留在消息中，但是他的表示方式会依照语言而定。int类型的字段总会保留他们的")])]),t._v(" "),s("h1",{attrs:{id:"any"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#any"}},[t._v("#")]),t._v(" Any")]),t._v(" "),s("p",[t._v("Any类型消息允许你在没有指定他们的.proto定义的情况下使用消息作为一个嵌套类型。一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型。为了使用Any类型，你需要导入"),s("code",[t._v("import google/protobuf/any.proto")])]),t._v(" "),s("div",{staticClass:"language-protobuf line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"google/protobuf/any.proto"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ErrorStatus")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" message "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("repeated")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("google"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("protobuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Any")]),t._v(" details "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("对于给定的消息类型的默认类型URL是"),s("code",[t._v("type.googleapis.com/packagename.messagename")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Storing an arbitrary message type in Any.")]),t._v("\nNetworkErrorDetails details "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nErrorStatus status"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstatus"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_details")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PackFrom")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("details"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Reading an arbitrary message from Any.")]),t._v("\nErrorStatus status "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Any"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" detail "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" status"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("details")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("detail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Is"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("NetworkErrorDetails"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    NetworkErrorDetails network_error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    detail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("UnpackTo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("network_error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" processing network_error "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("p",[t._v("不同语言的实现会支持动态库以线程安全的方式去帮助封装或者解封装Any值。例如在java中，Any类型会有特殊的"),s("code",[t._v("pack()")]),t._v("和"),s("code",[t._v("unpack()")]),t._v("访问器，在C++中会有"),s("code",[t._v("PackFrom()")]),t._v("和"),s("code",[t._v("UnpackTo()")]),t._v("方法。")]),t._v(" "),s("p",[s("strong",[t._v("目前，用于Any类型的动态库仍在开发之中")])]),t._v(" "),s("p",[t._v("如果你已经很熟悉"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/proto?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("proto2语法"),s("OutboundLink")],1),t._v("，使用Any替换"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/proto?hl=zh-cn#extensions",target:"_blank",rel:"noopener noreferrer"}},[t._v("拓展"),s("OutboundLink")],1)]),t._v(" "),s("h1",{attrs:{id:"oneof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#oneof"}},[t._v("#")]),t._v(" Oneof")]),t._v(" "),s("p",[t._v("如果你的消息中有很多可选字段， 并且同时至多一个字段会被设置， 你可以加强这个行为，使用oneof特性节省内存.")]),t._v(" "),s("p",[t._v("Oneof字段就像可选字段， 除了它们会共享内存， 至多一个字段会被设置。 设置其中一个字段会清除其它字段。 你可以使用"),s("code",[t._v("case()")]),t._v("或者"),s("code",[t._v("WhichOneof()")]),t._v(" 方法检查哪个oneof字段被设置， 看你使用什么语言了.")]),t._v(" "),s("h3",{attrs:{id:"使用oneof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用oneof"}},[t._v("#")]),t._v(" 使用Oneof")]),t._v(" "),s("p",[t._v("为了在.proto定义Oneof字段， 你需要在名字前面加上oneof关键字, 比如下面例子的test_oneof:")]),t._v(" "),s("div",{staticClass:"language-protobuf line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SampleMessage")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("oneof")]),t._v(" test_oneof "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("SubMessage")]),t._v(" sub_message "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("然后你可以增加oneof字段到 oneof 定义中. 你可以增加任意类型的字段, 但是不能使用repeated 关键字.")]),t._v(" "),s("p",[t._v("在产生的代码中, oneof字段拥有同样的 getters 和setters， 就像正常的可选字段一样. 也有一个特殊的方法来检查到底那个字段被设置. 你可以在相应的语言"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/overview?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("API指南"),s("OutboundLink")],1),t._v("中找到oneof API介绍.")]),t._v(" "),s("h3",{attrs:{id:"oneof-特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#oneof-特性"}},[t._v("#")]),t._v(" Oneof 特性")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("设置oneof会自动清楚其它oneof字段的值. 所以设置多次后，只有最后一次设置的字段有值.")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("SampleMessage message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmessage"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CHECK")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("has_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmessage"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mutable_sub_message")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Will clear name field.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CHECK")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("has_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])])]),t._v(" "),s("li",[s("p",[t._v("如果解析器遇到同一个oneof中有多个成员，只有最会一个会被解析成消息。")])]),t._v(" "),s("li",[s("p",[t._v("oneof不支持"),s("code",[t._v("repeated")]),t._v(".")])]),t._v(" "),s("li",[s("p",[t._v("反射API对oneof 字段有效.")])])]),t._v(" "),s("h3",{attrs:{id:"向后兼容性问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#向后兼容性问题"}},[t._v("#")]),t._v(" 向后兼容性问题")]),t._v(" "),s("p",[t._v("当增加或者删除oneof字段时一定要小心. 如果检查oneof的值返回"),s("code",[t._v("None/NOT_SET")]),t._v(", 它意味着oneof字段没有被赋值或者在一个不同的版本中赋值了。 你不会知道是哪种情况，因为没有办法判断如果未识别的字段是一个oneof字段。")]),t._v(" "),s("p",[t._v("Tage 重用问题：")]),t._v(" "),s("ul",[s("li",[t._v("将字段移入或移除oneof：在消息被序列号或者解析后，你也许会失去一些信息（有些字段也许会被清除）")]),t._v(" "),s("li",[t._v("删除一个字段或者加入一个字段：在消息被序列号或者解析后，这也许会清除你现在设置的oneof字段")]),t._v(" "),s("li",[t._v("分离或者融合oneof：行为与移动常规字段相似。")])]),t._v(" "),s("h1",{attrs:{id:"map-映射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#map-映射"}},[t._v("#")]),t._v(" Map（映射）")]),t._v(" "),s("p",[t._v("如果你希望创建一个关联映射，protocol buffer提供了一种快捷的语法：")]),t._v(" "),s("p",[t._v("其中"),s("code",[t._v("key_type")]),t._v("可以是任意Integer或者string类型（所以，除了floating和bytes的任意标量类型都是可以的）"),s("code",[t._v("value_type")]),t._v("可以是任意类型。")]),t._v(" "),s("p",[t._v("例如，如果你希望创建一个project的映射，每个"),s("code",[t._v("Projecct")]),t._v("使用一个string作为key，你可以像下面这样定义：")]),t._v(" "),s("ul",[s("li",[t._v("Map的字段可以是repeated。")]),t._v(" "),s("li",[t._v("序列化后的顺序和map迭代器的顺序是不确定的，所以你不要期望以固定顺序处理Map")]),t._v(" "),s("li",[t._v("当为.proto文件产生生成文本格式的时候，map会按照key 的顺序排序，数值化的key会按照数值排序。")]),t._v(" "),s("li",[t._v("从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用，当从文本格式中解析map时，如果存在重复的key。")])]),t._v(" "),s("p",[t._v("生成map的API现在对于所有proto3支持的语言都可用了，你可以从"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/overview?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("API指南"),s("OutboundLink")],1),t._v("找到更多信息。")]),t._v(" "),s("h1",{attrs:{id:"包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#包"}},[t._v("#")]),t._v(" 包")]),t._v(" "),s("p",[t._v("当然可以为.proto文件新增一个可选的package声明符，用来防止不同的消息类型有命名冲突。如：")]),t._v(" "),s("div",{staticClass:"language-protobuf line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Open")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("在其他的消息格式定义中可以使用包名+消息名的方式来定义域的类型，如：")]),t._v(" "),s("div",{staticClass:"language-protobuf line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("required")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Open")]),t._v(" open "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("包的声明符会根据使用语言的不同影响生成的代码。")]),t._v(" "),s("ul",[s("li",[t._v("对于C++，产生的类会被包装在C++的命名空间中，如上例中的"),s("code",[t._v("Open")]),t._v("会被封装在 "),s("code",[t._v("foo::bar")]),t._v("空间中； - 对于Java，包声明符会变为java的一个包，除非在.proto文件中提供了一个明确有"),s("code",[t._v("java_package")]),t._v("；")]),t._v(" "),s("li",[t._v("对于 Python，这个包声明符是被忽略的，因为Python模块是按照其在文件系统中的位置进行组织的。")]),t._v(" "),s("li",[t._v("对于Go，包可以被用做Go包名称，除非你显式的提供一个"),s("code",[t._v("option go_package")]),t._v("在你的.proto文件中。")]),t._v(" "),s("li",[t._v("对于Ruby，生成的类可以被包装在内置的Ruby名称空间中，转换成Ruby所需的大小写样式 （首字母大写；如果第一个符号不是一个字母，则使用PB_前缀），例如"),s("code",[t._v("Open")]),t._v("会在"),s("code",[t._v("Foo::Bar")]),t._v("名称空间中。")]),t._v(" "),s("li",[t._v("对于javaNano包会使用Java包，除非你在你的文件中显式的提供一个"),s("code",[t._v("option java_package")]),t._v("。")]),t._v(" "),s("li",[t._v("对于C#包可以转换为"),s("code",[t._v("PascalCase")]),t._v("后作为名称空间，除非你在你的文件中显式的提供一个"),s("code",[t._v("option csharp_namespace")]),t._v("，例如，"),s("code",[t._v("Open")]),t._v("会在"),s("code",[t._v("Foo.Bar")]),t._v("名称空间中")])]),t._v(" "),s("h3",{attrs:{id:"包及名称的解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#包及名称的解析"}},[t._v("#")]),t._v(" 包及名称的解析")]),t._v(" "),s("p",[t._v("Protocol buffer语言中类型名称的解析与C++是一致的：首先从最内部开始查找，依次向外进行，每个包会被看作是其父类包的内部类。当然对于 （"),s("code",[t._v("foo.bar.Baz")]),t._v("）这样以“.”分隔的意味着是从最外围开始的。")]),t._v(" "),s("p",[t._v("ProtocolBuffer编译器会解析.proto文件中定义的所有类型名。 对于不同语言的代码生成器会知道如何来指向每个具体的类型，即使它们使用了不同的规则。")]),t._v(" "),s("h1",{attrs:{id:"定义服务-service"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义服务-service"}},[t._v("#")]),t._v(" 定义服务(Service)")]),t._v(" "),s("p",[t._v("如果想要将消息类型用在RPC(远程方法调用)系统中，可以在.proto文件中定义一个RPC服务接口，protocol buffer编译器将会根据所选择的不同语言生成服务接口代码及存根。如，想要定义一个RPC服务并具有一个方法，该方法能够接收 SearchRequest并返回一个SearchResponse，此时可以在.proto文件中进行如下定义：")]),t._v(" "),s("p",[t._v("最直观的使用protocol buffer的RPC系统是"),s("a",{attrs:{href:"https://github.com/grpc/grpc-experiments",target:"_blank",rel:"noopener noreferrer"}},[t._v("gRPC"),s("OutboundLink")],1),t._v("一个由谷歌开发的语言和平台中的开源的PRC系统，gRPC在使用protocl buffer时非常有效，如果使用特殊的protocol buffer插件可以直接为您从.proto文件中产生相关的RPC代码。")]),t._v(" "),s("p",[t._v("如果你不想使用gRPC，也可以使用protocol buffer用于自己的RPC实现，你可以从"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/proto?hl=zh-cn#services",target:"_blank",rel:"noopener noreferrer"}},[t._v("proto2语言指南中找到更多信息"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("还有一些第三方开发的PRC实现使用Protocol Buffer。参考"),s("a",{attrs:{href:"https://github.com/google/protobuf/blob/master/docs/third_party.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("第三方插件wiki"),s("OutboundLink")],1),t._v("查看这些实现的列表。")]),t._v(" "),s("h1",{attrs:{id:"json-映射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#json-映射"}},[t._v("#")]),t._v(" JSON 映射")]),t._v(" "),s("p",[t._v("Proto3 支持JSON的编码规范，使他更容易在不同系统之间共享数据，在下表中逐个描述类型。")]),t._v(" "),s("p",[t._v("如果JSON编码的数据丢失或者其本身就是"),s("code",[t._v("null")]),t._v("，这个数据会在解析成protocol buffer的时候被表示成默认值。如果一个字段在protocol buffer中表示为默认值，体会在转化成JSON的时候编码的时候忽略掉以节省空间。具体实现可以提供在JSON编码中可选的默认值。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("proto3")]),t._v(" "),s("th",[t._v("JSON")]),t._v(" "),s("th",[t._v("JSON示例")]),t._v(" "),s("th",[t._v("注意")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("message")]),t._v(" "),s("td",[t._v("object")]),t._v(" "),s("td",[t._v("{“fBar”: v, “g”: null, …}")]),t._v(" "),s("td",[t._v("产生JSON对象，消息字段名可以被映射成lowerCamelCase形式，并且成为JSON对象键，null被接受并成为对应字段的默认值")])]),t._v(" "),s("tr",[s("td",[t._v("enum")]),t._v(" "),s("td",[t._v("string")]),t._v(" "),s("td",[t._v("“FOO_BAR”")]),t._v(" "),s("td",[t._v("枚举值的名字在proto文件中被指定")])]),t._v(" "),s("tr",[s("td",[t._v("map")]),t._v(" "),s("td",[t._v("object")]),t._v(" "),s("td",[t._v("{“k”: v, …}")]),t._v(" "),s("td",[t._v("所有的键都被转换成string")])]),t._v(" "),s("tr",[s("td",[t._v("repeated V")]),t._v(" "),s("td",[t._v("array")]),t._v(" "),s("td",[t._v("[v, …]")]),t._v(" "),s("td",[t._v("null被视为空列表")])]),t._v(" "),s("tr",[s("td",[t._v("bool")]),t._v(" "),s("td",[t._v("true, false")]),t._v(" "),s("td",[t._v("true, false")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("string")]),t._v(" "),s("td",[t._v("string")]),t._v(" "),s("td",[t._v("“Hello World!”")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("bytes")]),t._v(" "),s("td",[t._v("base64 string")]),t._v(" "),s("td",[t._v("“YWJjMTIzIT8kKiYoKSctPUB+”")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("int32, fixed32, uint32")]),t._v(" "),s("td",[t._v("number")]),t._v(" "),s("td",[t._v("1, -10, 0")]),t._v(" "),s("td",[t._v("JSON值会是一个十进制数，数值型或者string类型都会接受")])]),t._v(" "),s("tr",[s("td",[t._v("int64, fixed64, uint64")]),t._v(" "),s("td",[t._v("string")]),t._v(" "),s("td",[t._v("“1”, “-10”")]),t._v(" "),s("td",[t._v("JSON值会是一个十进制数，数值型或者string类型都会接受")])]),t._v(" "),s("tr",[s("td",[t._v("float, double")]),t._v(" "),s("td",[t._v("number")]),t._v(" "),s("td",[t._v("1.1, -10.0, 0, “NaN”, “Infinity”")]),t._v(" "),s("td",[t._v("JSON值会是一个数字或者一个指定的字符串如”NaN”,”infinity”或者”-Infinity”，数值型或者字符串都是可接受的，指数符号也可以接受")])]),t._v(" "),s("tr",[s("td",[t._v("Any")]),t._v(" "),s("td",[t._v("object")]),t._v(" "),s("td",[t._v("{“@type”: “url”, “f”: v, … }")]),t._v(" "),s("td",[t._v("如果一个Any保留一个特上述的JSON映射，则它会转换成一个如下形式："),s("code",[t._v('{"@type": xxx, "value": yyy}')]),t._v("否则，该值会被转换成一个JSON对象，"),s("code",[t._v("@type")]),t._v("字段会被插入所指定的确定的值")])]),t._v(" "),s("tr",[s("td",[t._v("Timestamp")]),t._v(" "),s("td",[t._v("string")]),t._v(" "),s("td",[t._v("“1972-01-01T10:00:20.021Z”")]),t._v(" "),s("td",[t._v("使用RFC 339，其中生成的输出将始终是Z-归一化啊的，并且使用0，3，6或者9位小数")])]),t._v(" "),s("tr",[s("td",[t._v("Duration")]),t._v(" "),s("td",[t._v("string")]),t._v(" "),s("td",[t._v("“1.000340012s”, “1s”")]),t._v(" "),s("td",[t._v("生成的输出总是0，3，6或者9位小数，具体依赖于所需要的精度，接受所有可以转换为纳秒级的精度")])]),t._v(" "),s("tr",[s("td",[t._v("Struct")]),t._v(" "),s("td",[t._v("object")]),t._v(" "),s("td",[t._v("{ … }")]),t._v(" "),s("td",[t._v("任意的JSON对象，见struct.proto")])]),t._v(" "),s("tr",[s("td",[t._v("Wrapper types")]),t._v(" "),s("td",[t._v("various types")]),t._v(" "),s("td",[t._v("2, “2”, “foo”, true, “true”, null, 0, …")]),t._v(" "),s("td",[t._v("包装器在JSON中的表示方式类似于基本类型，但是允许nulll，并且在转换的过程中保留null")])]),t._v(" "),s("tr",[s("td",[t._v("FieldMask")]),t._v(" "),s("td",[t._v("string")]),t._v(" "),s("td",[t._v("“f.fooBar,h”")]),t._v(" "),s("td",[t._v("见fieldmask.proto")])]),t._v(" "),s("tr",[s("td",[t._v("ListValue")]),t._v(" "),s("td",[t._v("array")]),t._v(" "),s("td",[t._v("[foo, bar, …]")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("Value")]),t._v(" "),s("td",[t._v("value")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("任意JSON值")])]),t._v(" "),s("tr",[s("td",[t._v("NullValue")]),t._v(" "),s("td",[t._v("null")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("JSON null")])])])]),t._v(" "),s("h1",{attrs:{id:"选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#选项"}},[t._v("#")]),t._v(" 选项")]),t._v(" "),s("p",[t._v("在定义.proto文件时能够标注一系列的options。Options并不改变整个文件声明的含义，但却能够影响特定环境下处理方式。完整的可用选项可以在google/protobuf/descriptor.proto找到。")]),t._v(" "),s("p",[t._v("一些选项是文件级别的，意味着它可以作用于最外范围，不包含在任何消息内部、enum或服务定义中。一些选项是消息级别的，意味着它可以用在消息定义的内部。当然有些选项可以作用在域、enum类型、enum值、服务类型及服务方法中。到目前为止，并没有一种有效的选项能作用于所有的类型。")]),t._v(" "),s("p",[t._v("如下就是一些常用的选择：")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("java_package")]),t._v(" (文件选项) :这个选项表明生成java类所在的包。如果在.proto文件中没有明确的声明java_package，就采用默认的包名。当然了，默认方式产生的 java包名并不是最好的方式，按照应用名称倒序方式进行排序的。如果不需要产生java代码，则该选项将不起任何作用。如：")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("java_outer_classname")]),t._v(" (文件选项): 该选项表明想要生成Java类的名称。如果在.proto文件中没有明确的java_outer_classname定义，生成的class名称将会根据.proto文件的名称采用驼峰式的命名方式进行生成。如（foo_bar.proto生成的java类名为FooBar.java）,如果不生成java代码，则该选项不起任何作用。如：")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("optimize_for")]),t._v("(文件选项): 可以被设置为 SPEED, CODE_SIZE,或者LITE_RUNTIME。这些值将通过如下的方式影响C++及java代码的生成：")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("SPEED (default)")]),t._v(": protocol buffer编译器将通过在消息类型上执行序列化、语法分析及其他通用的操作。这种代码是最优的。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("CODE_SIZE")]),t._v(": protocol buffer编译器将会产生最少量的类，通过共享或基于反射的代码来实现序列化、语法分析及各种其它操作。采用该方式产生的代码将比SPEED要少得多， 但是操作要相对慢些。当然实现的类及其对外的API与SPEED模式都是一样的。这种方式经常用在一些包含大量的.proto文件而且并不盲目追求速度的 应用中。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("LITE_RUNTIME")]),t._v(": protocol buffer编译器依赖于运行时核心类库来生成代码（即采用libprotobuf-lite 替代libprotobuf）。这种核心类库由于忽略了一 些描述符及反射，要比全类库小得多。这种模式经常在移动手机平台应用多一些。编译器采用该模式产生的方法实现与SPEED模式不相上下，产生的类通过实现 MessageLite接口，但它仅仅是Messager接口的一个子集。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("cc_enable_arenas")]),t._v("(文件选项):对于C++产生的代码启用"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/arenas?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("arena allocation"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("code",[t._v("objc_class_prefix")]),t._v("(文件选项):设置Objective-C类的前缀，添加到所有Objective-C从此.proto文件产生的类和枚举类型。没有默认值，所使用的前缀应该是苹果推荐的3-5个大写字符，注意2个字节的前缀是苹果所保留的。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("deprecated")]),t._v("(字段选项):如果设置为"),s("code",[t._v("true")]),t._v("则表示该字段已经被废弃，并且不应该在新的代码中使用。在大多数语言中没有实际的意义。在java中，这回变成"),s("code",[t._v("@Deprecated")]),t._v("注释，在未来，其他语言的代码生成器也许会在字标识符中产生废弃注释，废弃注释会在编译器尝试使用该字段时发出警告。如果字段没有被使用你也不希望有新用户使用它，尝试使用保留语句替换字段声明。")])])]),t._v(" "),s("h3",{attrs:{id:"自定义选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义选项"}},[t._v("#")]),t._v(" 自定义选项")]),t._v(" "),s("p",[t._v("ProtocolBuffers允许自定义并使用选项。该功能应该属于一个高级特性，对于大部分人是用不到的。如果你的确希望创建自己的选项，请参看"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/proto?hl=zh-cn#customoptions",target:"_blank",rel:"noopener noreferrer"}},[t._v(" Proto2 Language Guide"),s("OutboundLink")],1),t._v("。注意创建自定义选项使用了拓展，拓展只在proto3中可用。")]),t._v(" "),s("h1",{attrs:{id:"生成访问类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成访问类"}},[t._v("#")]),t._v(" 生成访问类")]),t._v(" "),s("p",[t._v("可以通过定义好的.proto文件来生成Java,Python,C++, Ruby, JavaNano, Objective-C,或者C# 代码，需要基于.proto文件运行protocol buffer编译器protoc。如果你没有安装编译器，下载"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/downloads?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("安装包"),s("OutboundLink")],1),t._v("并遵照README安装。对于Go,你还需要安装一个特殊的代码生成器插件。你可以通过GitHub上的"),s("a",{attrs:{href:"https://github.com/golang/protobuf/",target:"_blank",rel:"noopener noreferrer"}},[t._v("protobuf库"),s("OutboundLink")],1),t._v("找到安装过程")]),t._v(" "),s("p",[t._v("通过如下方式调用protocol编译器：")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("IMPORT_PATH")]),t._v("声明了一个.proto文件所在的解析import具体目录。如果忽略该值，则使用当前目录。如果有多个目录则可以多次调用"),s("code",[t._v("--proto_path")]),t._v("，它们将会顺序的被访问并执行导入。"),s("code",[t._v("-I=IMPORT_PATH")]),t._v("是"),s("code",[t._v("--proto_path")]),t._v("的简化形式。")])]),t._v(" "),s("li",[s("p",[t._v("当然也可以提供一个或多个输出路径：")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("--cpp_out")]),t._v(" 在目标目录DST_DIR中产生C++代码，可以在"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/cpp-generated?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("C++代码生成参考"),s("OutboundLink")],1),t._v("中查看更多。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("--java_out")]),t._v(" 在目标目录DST_DIR中产生Java代码，可以在 "),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/java-generated?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java代码生成参考"),s("OutboundLink")],1),t._v("中查看更多。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("--python_out")]),t._v(" 在目标目录 DST_DIR 中产生Python代码，可以在"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/python-generated?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python代码生成参考"),s("OutboundLink")],1),t._v("中查看更多。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("--go_out")]),t._v(" 在目标目录 DST_DIR 中产生Go代码，可以在"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/go-generated?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("GO代码生成参考"),s("OutboundLink")],1),t._v("中查看更多。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("--ruby_out")]),t._v("在目标目录 DST_DIR 中产生Go代码，参考正在制作中。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("--javanano_out")]),t._v("在目标目录DST_DIR中生成JavaNano，JavaNano代码生成器有一系列的选项用于定制自定义生成器的输出：你可以通过生成器的"),s("a",{attrs:{href:"https://github.com/google/protobuf/tree/master/javanano",target:"_blank",rel:"noopener noreferrer"}},[t._v("README"),s("OutboundLink")],1),t._v("查找更多信息，JavaNano参考正在制作中。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("--objc_out")]),t._v("在目标目录DST_DIR中产生Object代码，可以在"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/objective-c-generated?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("Objective-C代码生成参考"),s("OutboundLink")],1),t._v("中查看更多。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("--csharp_out")]),t._v("在目标目录DST_DIR中产生Object代码，可以在"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/csharp-generated?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("C#代码生成参考"),s("OutboundLink")],1),t._v("中查看更多。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("--php_out")]),t._v("在目标目录DST_DIR中产生Object代码，可以在"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/php-generated?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("PHP代码生成参考"),s("OutboundLink")],1),t._v("中查看更多。")])])]),t._v(" "),s("p",[t._v("作为一个方便的拓展，如果DST_DIR以.zip或者.jar结尾，编译器会将输出写到一个ZIP格式文件或者符合JAR标准的.jar文件中。注意如果输出已经存在则会被覆盖，编译器还没有智能到可以追加文件。")]),t._v(" "),s("p",[t._v("- 你必须提议一个或多个.proto文件作为输入，多个.proto文件可以只指定一次。虽然文件路径是相对于当前目录的，每个文件必须位于其IMPORT_PATH下，以便每个文件可以确定其规范的名称。")])])}),[],!1,null,null,null);s.default=r.exports}}]);