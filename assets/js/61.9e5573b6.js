(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{383:function(v,_,s){"use strict";s.r(_);var a=s(3),e=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("ul",[_("li",[_("p",[v._v("go支持两种条件编译的实现方式")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("编译标签（build tags）")]),v._v(" "),_("p",[_("code",[v._v("//go:build !windows")]),v._v("  和 "),_("code",[v._v("// +build !windows")])])]),v._v(" "),_("li",[_("p",[v._v("文件后缀")])])])]),v._v(" "),_("li",[_("p",[v._v("条件编译的应用场景")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("平台适配")]),v._v("：不同平台的操作系统和 CPU 架构可能有不同的特性和限制，需要针对不同平台编写不同的代码。通过条件编译，可以根据不同平台选择不同的代码进行编译，从而提高程序的性能和稳定性。")]),v._v(" "),_("li",[_("strong",[v._v("调试信息")]),v._v("：在开发和调试过程中，需要添加一些调试信息来辅助开发人员定位问题。但是，在发布版本时这些信息不应该包含在内。使用条件编译，可以在开发和调试阶段包含调试信息，在发布版本中去除这些信息。")]),v._v(" "),_("li",[_("strong",[v._v("功能开关")]),v._v("：有些功能可能只在特定的场景下使用，而在其他场景下不需要。使用条件编译可以根据编译标记开启或关闭这些功能，从而减少程序的代码量和复杂度。")]),v._v(" "),_("li",[_("strong",[v._v("性能优化")]),v._v("：有些代码可能只在特定的环境下才能发挥最优性能。使用条件编译，可以根据编译标记选择不同的代码实现，从而提高程序的性能。")])])])]),v._v(" "),_("h2",{attrs:{id:"编译标签-build-tags"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#编译标签-build-tags"}},[v._v("#")]),v._v(" 编译标签（build tags）")]),v._v(" "),_("h3",{attrs:{id:"_1-go-build-和-build-的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-go-build-和-build-的区别"}},[v._v("#")]),v._v(" 1. "),_("code",[v._v("//go:build")]),v._v("  和  "),_("code",[v._v("// +build")]),v._v(" 的区别")]),v._v(" "),_("ul",[_("li",[_("p",[_("code",[v._v("// +build")]),v._v("编译条件的注释和package 语句之间"),_("strong",[v._v("一定要隔一行")]),v._v("。不然无法识别编译条件，编译条件支持“非”逻辑，比如某个文件在非 windows 环境下编译")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("//go:build")]),v._v("是Go 1.17中引入的新的条件编译指令，旨在取代"),_("code",[v._v("// +build")]),v._v("指令，因为新语法带来了一些关键改进：")]),v._v(" "),_("ul",[_("li",[v._v("与其他现有Go指令和pragma的一致性，例如"),_("code",[v._v("//go:generate")])]),v._v(" "),_("li",[v._v("支持标准布尔表达式，例如"),_("code",[v._v("//go:build foo && bar")]),v._v("，而旧的"),_("code",[v._v("// +build")]),v._v("注释的语法不那么直观。例如，AND用逗号"),_("code",[v._v("// +build foo,bar")]),v._v("和或空格"),_("code",[v._v("// +build foo bar")]),v._v("表示")]),v._v(" "),_("li",[v._v("它由"),_("code",[v._v("go fmt")]),v._v("支持，它将自动修复指令在源文件中的错误位置，从而避免常见错误，如在指令和包语句之间不留空行。")])])]),v._v(" "),_("li",[_("p",[v._v("在Go 1.N中：")]),v._v(" "),_("ul",[_("li",[v._v("生成将开始优先选择"),_("code",[v._v("//go:build")]),v._v("行进行文件选择。如果文件中没有"),_("code",[v._v("//go:build")]),v._v("，那么任何"),_("code",[v._v("// +build")]),v._v("行仍然适用。")]),v._v(" "),_("li",[v._v("如果Go文件包含"),_("code",[v._v("//go:build")]),v._v("而没有"),_("code",[v._v("// +build")]),v._v("，则构建将不再失败。")]),v._v(" "),_("li",[v._v("如果Go或程序集文件中包含"),_("code",[v._v("//go:build")]),v._v("太晚，则生成将失败。Gofmt将把错位的//go:build和//+build行移到文件中的正确位置。")]),v._v(" "),_("li",[_("code",[v._v("Gofmt")]),v._v("将使用与其他Go布尔表达式（所有"),_("code",[v._v("&&")]),v._v("和"),_("code",[v._v("||")]),v._v("运算符周围的空格）相同的规则格式化"),_("code",[v._v("//go:build")]),v._v("行中的表达式。")]),v._v(" "),_("li",[v._v("如果文件只包含"),_("code",[v._v("// +build")]),v._v("行，则"),_("code",[v._v("gofmt")]),v._v("将在其上方添加一个等效的"),_("code",[v._v("//go:build")]),v._v("行。")]),v._v(" "),_("li",[v._v("如果一个文件同时包含"),_("code",[v._v("//go:build")]),v._v("和"),_("code",[v._v("// +build")]),v._v("行，则"),_("code",[v._v("gofmt")]),v._v("将考虑"),_("code",[v._v("//go:build")]),v._v("是真理的来源，并更新"),_("code",[v._v("// +build")]),v._v("行以匹配，从而保持与早期版本的Go的兼容性。"),_("code",[v._v("Gofmt")]),v._v("还将拒绝被认为太复杂而无法转换为"),_("code",[v._v("// +build")]),v._v("格式的"),_("code",[v._v("//go:build")]),v._v("行，尽管这种情况很少见。（注意此项目符号开头的“If”。"),_("code",[v._v("Gofmt")]),v._v("不会将"),_("code",[v._v("// +build")]),v._v("行添加到只有"),_("code",[v._v("//go:build")]),v._v(".的文件中）")]),v._v(" "),_("li",[_("code",[v._v("buildtags")]),v._v("签入"),_("code",[v._v("go vet")]),v._v("将添加对"),_("code",[v._v("//go:build")]),v._v("约束的支持。当Go源文件包含具有不同含义的"),_("code",[v._v("//go:build")]),v._v("和"),_("code",[v._v("// +build")]),v._v("行时，它将失败。如果检查失败，可以运行"),_("code",[v._v("gofmt -w")]),v._v("。")])])])]),v._v(" "),_("h3",{attrs:{id:"_2-使用说明"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用说明"}},[v._v("#")]),v._v(" 2. 使用说明")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("基础语法")]),v._v(" "),_("div",{staticClass:"language-go line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-go"}},[_("code",[_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// +build <tag1> <tag2> <tag3> ...")]),v._v("\n或者是\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//go:build <tag1> <tag2> <tag3> ...")]),v._v("\n\n编译的时候\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("go")]),v._v(" build "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("-")]),v._v("tag1 mytag2 mytag3\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br"),_("span",{staticClass:"line-number"},[v._v("5")]),_("br"),_("span",{staticClass:"line-number"},[v._v("6")]),_("br")])]),_("ul",[_("li",[_("code",[v._v("<tag>")]),v._v(" 可以是操作系统、CPU 架构、编译标记等，多个标记之间用空格分隔或者都好分隔。\n"),_("ul",[_("li",[v._v("编译标签由空格分隔的编译选项(options)以”或”的逻辑关系组成")]),v._v(" "),_("li",[v._v("每个编译选项由逗号分隔的条件项以逻辑”与”的关系组成")]),v._v(" "),_("li",[v._v("每个条件项的名字用字母+数字表示，在前面加!表示否定的意思")]),v._v(" "),_("li",[v._v("不同tag域之间用空格区分，他们是OR关系")]),v._v(" "),_("li",[v._v("同一tag域之内不同的tag用都好区分，他们是AND关系")]),v._v(" "),_("li",[v._v("每一个tag都由字母和数字构成，！开头表示条件“非”")])])])]),v._v(" "),_("div",{staticClass:"language-go line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-go"}},[_("code",[_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// +build linux darwin")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// +build 386")]),v._v("\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br")])]),_("ul",[_("li",[_("p",[v._v("一个源文件里可以有多个编译标签，多个编译标签之间是逻辑”与”的关系")])]),v._v(" "),_("li",[_("p",[v._v("关系")]),v._v(" "),_("div",{staticClass:"language-go line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-go"}},[_("code",[v._v("空格表示：AND \n逗号表示：OR \n"),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("!")]),v._v("表示：NOT \n换行表示：AND\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br")])])])])]),v._v(" "),_("li",[_("p",[v._v("内置 tag")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("指定操作系统：如 "),_("code",[v._v("darwin")]),v._v("、"),_("code",[v._v("linux")]),v._v("、"),_("code",[v._v("windows")]),v._v(" 等，对应 runtime.GOOS 的值。")])]),v._v(" "),_("li",[_("p",[v._v("指定CPU 架构：如 "),_("code",[v._v("amd64")]),v._v("、"),_("code",[v._v("arm")]),v._v("、"),_("code",[v._v("386")]),v._v(" 等，对应 runtime.GOARCH 的值。")])]),v._v(" "),_("li",[_("p",[v._v("指定编译器：例如：gccgo、gc，是否开启CGO,cgo。")])]),v._v(" "),_("li",[_("p",[v._v("指定Go 版本：例如：go1.19、go1.20 等。")])]),v._v(" "),_("li",[_("p",[v._v("// +build ignore，编译时自动忽略该文件")])]),v._v(" "),_("li",[_("p",[v._v("demo")]),v._v(" "),_("div",{staticClass:"language-go line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-go"}},[_("code",[_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// +build linux,arm !darwin")]),v._v("\n\n表示该文件在 Linux 平台且 ARM 架构下编译，但不在 Darwin 平台下编译。\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br")])])])])]),v._v(" "),_("li",[_("p",[v._v("自定义tag, "),_("code",[v._v("// +build mytag")]),v._v(" 编译的时候"),_("code",[v._v("go build -tags mytag")]),v._v("才会编译此文件")])])]),v._v(" "),_("h3",{attrs:{id:"_3-注意事项"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-注意事项"}},[v._v("#")]),v._v(" 3. 注意事项")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("// +build")]),v._v(" 或者 "),_("code",[v._v("//go:build")]),v._v(" 指令必须放在文件的开头。")]),v._v(" "),_("li",[_("code",[v._v("// +build")]),v._v(" 或者 "),_("code",[v._v("//go:build")]),v._v(" 指令只能出现一次，且只能针对整个文件进行编译，不能对单独的函数或变量进行编译。")]),v._v(" "),_("li",[v._v("标记中的操作系统和 CPU 架构必须使用官方定义的名称，否则编译器无法识别。")]),v._v(" "),_("li",[v._v("在编写代码时，应该尽量避免使用条件编译，以保持代码的简洁和易读性。")]),v._v(" "),_("li",[v._v("在使用编译标记时，应该尽量使用官方定义的标记，避免与其他库或框架的标记冲突。")])]),v._v(" "),_("h2",{attrs:{id:"文件后缀"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#文件后缀"}},[v._v("#")]),v._v(" 文件后缀")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("这个方法通过改变文件名的后缀来提供条件编译，这种方案比编译标签要简单很多")])]),v._v(" "),_("li",[_("p",[v._v("go/build可以在不读取源文件的情况下就可以决定哪些文件不需要参与编译。")])]),v._v(" "),_("li",[_("p",[v._v("简单来说，就是源文件包含后缀："),_("em",[v._v("$GOOS.go，那么这个源文件只会在这个平台下编译，")]),v._v("$GOARCH.go也是如此。")])]),v._v(" "),_("li",[_("p",[v._v("demo")]),v._v(" "),_("div",{staticClass:"language-go line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-go"}},[_("code",[v._v("mygo_freebsd_arm"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("go")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// only builds on freebsd/arm systems")]),v._v("\nmygo_plan9"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("go")]),v._v("       "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// only builds on plan9")]),v._v("\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br")])])])])])}),[],!1,null,null,null);_.default=e.exports}}]);