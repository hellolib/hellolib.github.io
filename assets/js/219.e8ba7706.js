(window.webpackJsonp=window.webpackJsonp||[]).push([[219],{539:function(s,a,n){"use strict";n.r(a);var t=n(3),e=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"osi七层模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#osi七层模型"}},[s._v("#")]),s._v(" OSI七层模型")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20220705114517.png",alt:"image-20220705114517141"}})]),s._v(" "),a("ul",[a("li",[s._v("每层运行常见协议/物理设备")])]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("tcp/ip五层")]),s._v(" "),a("th",[s._v("每层运行常见协议")]),s._v(" "),a("th",[s._v("每层运行常见物理设备")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("5应用层")]),s._v(" "),a("td",[s._v("python代码/http/https/ftp/smtp/")]),s._v(" "),a("td")]),s._v(" "),a("tr",[a("td",[s._v("4传输层")]),s._v(" "),a("td",[s._v("tcp/udp协议 端口")]),s._v(" "),a("td",[s._v("四层交换机/四层路由器")])]),s._v(" "),a("tr",[a("td",[s._v("3网络层")]),s._v(" "),a("td",[s._v("ipv4/ipv6协议")]),s._v(" "),a("td",[s._v("三层路由器/三层交换机")])]),s._v(" "),a("tr",[a("td",[s._v("2数据链路层")]),s._v(" "),a("td",[s._v("mac地址/arp协议")]),s._v(" "),a("td",[s._v("网卡/交换机/二层交换机")])]),s._v(" "),a("tr",[a("td",[s._v("1物理层")]),s._v(" "),a("td"),s._v(" "),a("td")])])]),s._v(" "),a("h2",{attrs:{id:"tcp协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp协议"}},[s._v("#")]),s._v(" TCP协议")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20220705113236.png",alt:"image-20220705113236824"}})]),s._v(" "),a("ul",[a("li",[a("p",[s._v("TCP 是"),a("strong",[s._v("面向连接的、可靠的、基于字节流")]),s._v("的传输层通信协议。")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("面向连接")]),s._v("：一定是「一对一」才能连接，不能像 UDP 协议可以一个主机同时向多个主机发送消息，也就是一对多是无法做到的；")]),s._v(" "),a("li",[a("strong",[s._v("可靠的")]),s._v("：无论的网络链路中出现了怎样的链路变化，TCP 都可以保证一个报文一定能够到达接收端；")]),s._v(" "),a("li",[a("strong",[s._v("字节流")]),s._v("：用户消息通过 TCP 协议传输时，消息可能会被操作系统「分组」成多个的 TCP 报文，如果接收方的程序如果不知道「消息的边界」，是无法读出一个有效的用户消息的。并且 TCP 报文是「有序的」，当「前一个」TCP 报文没有收到的时候，即使它先收到了后面的 TCP 报文，那么也不能扔给应用层去处理，同时对「重复」的 TCP 报文会自动丢弃。")])])]),s._v(" "),a("li",[a("p",[s._v("什么是 TCP 连接？")]),s._v(" "),a("ul",[a("li",[s._v("用于保证可靠性和流量控制维护的某些状态信息，这些信息的组合，包括Socket、序列号和窗口大小称为连接。")])])]),s._v(" "),a("li",[a("p",[s._v("TCP 四元组可以唯一的确定一个连接，四元组包括如下:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20220705113922.png",alt:"TCP 四元组"}})]),s._v(" "),a("ul",[a("li",[s._v("源地址")]),s._v(" "),a("li",[s._v("源端口")]),s._v(" "),a("li",[s._v("目的地址")]),s._v(" "),a("li",[s._v("目的端口")])])]),s._v(" "),a("li",[a("p",[s._v("特点")]),s._v(" "),a("ol",[a("li",[s._v("可靠,速度慢,全双工通信")]),s._v(" "),a("li",[s._v("建立连接"),a("strong",[s._v("三次握手")]),s._v(",断开连接"),a("strong",[s._v("四次挥手")])]),s._v(" "),a("li",[s._v("建立起链接之后,发送每条消息都有回执,为了保证数据的完整性,还有重传机制")]),s._v(" "),a("li",[s._v("数据传输:有收必有发,收发必相等")]),s._v(" "),a("li",[s._v("长连接:会一直占用对方端口")])])])]),s._v(" "),a("h3",{attrs:{id:"_1-三次握手四次挥手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-三次握手四次挥手"}},[s._v("#")]),s._v(" 1. 三次握手四次挥手")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20220705113353.png",alt:"image-20220705113353903"}})]),s._v(" "),a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-txt"}},[a("code",[s._v("#三次握手\nTCP是因特网中的传输层协议，使用三次握手协议建立连接。当主动方发出SYN连接请求后，等待对方回答SYN+ACK[1]，并最终对对方的 SYN 执行 ACK 确认。这种建立连接的方法可以防止产生错误的连接。[1] \nTCP三次握手的过程如下：\n客户端发送SYN（SEQ=x）报文给服务器端，进入SYN_SEND状态。\n服务器端收到SYN报文，回应一个SYN （SEQ=y）ACK(ACK=x+1）报文，进入SYN_RECV状态。\n客户端收到服务器端的SYN报文，回应一个ACK(ACK=y+1）报文，进入Established状态。\n三次握手完成，TCP客户端和服务器端成功地建立连接，可以开始传输数据了。\n                        \n#四次挥手\n(1) 某个应用进程首先调用close，称该端执行“主动关闭”（active close）。该端的TCP于是发送一个FIN分节，表示数据发送完毕。\n(2) 接收到这个FIN的对端执行 “被动关闭”（passive close），这个FIN由TCP确认。\n注意：FIN的接收也作为一个文件结束符（end-of-file）传递给接收端应用进程，放在已排队等候该应用进程接收的任何其他数据之后，因为，FIN的接收意味着接收端应用进程在相应连接上再无额外数据可接收。\n(3) 一段时间后，接收到这个文件结束符的应用进程将调用close关闭它的套接字。这导致它的TCP也发送一个FIN。\n(4) 接收这个最终FIN的原发送端TCP（即执行主动关闭的那一端）确认这个FIN。[1] \n既然每个方向都需要一个FIN和一个ACK，因此通常需要4个分节。        \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h4",{attrs:{id:"_1-1-三次握手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-三次握手"}},[s._v("#")]),s._v(" 1.1 三次握手")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20220705115819.png",alt:"TCP 三次握手"}})]),s._v(" "),a("ul",[a("li",[a("p",[s._v("为什么是三次握手？不是两次、四次？")]),s._v(" "),a("ul",[a("li",[s._v("三次握手才可以阻止重复历史连接的初始化（主要原因）")]),s._v(" "),a("li",[s._v("三次握手才可以同步双方的初始序列号")]),s._v(" "),a("li",[s._v("三次握手才可以避免资源浪费")])])]),s._v(" "),a("li",[a("p",[s._v("第一次握手丢失了，会发生什么？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("当客户端想和服务端建立 TCP 连接的时候，首先第一个发的就是 SYN 报文，然后进入到 SYN_SENT 状态。\n在这之后，如果客户端迟迟收不到服务端的 SYN-ACK 报文（第二次握手），就会触发「超时重传」机制，重传 SYN 报文。\n不同版本的操作系统可能超时时间不同，有的 1 秒的，也有 3 秒的，这个超时时间是写死在内核里的，如果想要更改则需要重新编译内核，比较麻烦。\n当客户端在 1 秒后没收到服务端的 SYN-ACK 报文后，客户端就会重发 SYN 报文，那到底重发几次呢？\n在 Linux 里，客户端的 SYN 报文最大重传次数由 tcp_syn_retries内核参数控制，这个参数是可以自定义的，默认值一般是 5。\n通常，第一次超时重传是在 1 秒后，第二次超时重传是在 2 秒，第三次超时重传是在 4 秒后，第四次超时重传是在 8 秒后，第五次是在超时重传 16 秒后。没错，每次超时的时间是上一次的 2 倍。\n当第五次超时重传后，会继续等待 32 秒，如果服务端仍然没有回应 ACK，客户端就不再发送 SYN 包，然后断开 TCP 连接。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("第二次握手丢失了，会发生什么？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("因为第二次握手报文里是包含对客户端的第一次握手的 ACK 确认报文，所以，如果客户端迟迟没有收到第二次握手，那么客户端就觉得可能自己的 SYN 报文（第一次握手）丢失了，于是客户端就会触发超时重传机制，重传 SYN 报文。\n\n然后，因为第二次握手中包含服务端的 SYN 报文，所以当客户端收到后，需要给服务端发送 ACK 确认报文（第三次握手），服务端才会认为该 SYN 报文被客户端收到了。\n\n那么，如果第二次握手丢失了，服务端就收不到第三次握手，于是服务端这边会触发超时重传机制，重传 SYN-ACK 报文。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("第三次握手丢失了，会发生什么？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("客户端收到服务端的 SYN-ACK 报文后，就会给服务端回一个 ACK 报文，也就是第三次握手，此时客户端状态进入到 ESTABLISH 状态。\n\n因为这个第三次握手的 ACK 是对第二次握手的 SYN 的确认报文，所以当第三次握手丢失了，如果服务端那一方迟迟收不到这个确认报文，就会触发超时重传机制，重传 SYN-ACK 报文，直到收到第三次握手，或者达到最大重传次数。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])])]),s._v(" "),a("h4",{attrs:{id:"_1-2-四次挥手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-四次挥手"}},[s._v("#")]),s._v(" 1.2 四次挥手")]),s._v(" "),a("ul",[a("li",[s._v("客户端打算关闭连接，此时会发送一个 TCP 首部 "),a("code",[s._v("FIN")]),s._v(" 标志位被置为 "),a("code",[s._v("1")]),s._v(" 的报文，也即 "),a("code",[s._v("FIN")]),s._v(" 报文，之后客户端进入 "),a("code",[s._v("FIN_WAIT_1")]),s._v(" 状态。")]),s._v(" "),a("li",[s._v("服务端收到该报文后，就向客户端发送 "),a("code",[s._v("ACK")]),s._v(" 应答报文，接着服务端进入 "),a("code",[s._v("CLOSED_WAIT")]),s._v(" 状态。")]),s._v(" "),a("li",[s._v("客户端收到服务端的 "),a("code",[s._v("ACK")]),s._v(" 应答报文后，之后进入 "),a("code",[s._v("FIN_WAIT_2")]),s._v(" 状态。")]),s._v(" "),a("li",[s._v("等待服务端处理完数据后，也向客户端发送 "),a("code",[s._v("FIN")]),s._v(" 报文，之后服务端进入 "),a("code",[s._v("LAST_ACK")]),s._v(" 状态。")]),s._v(" "),a("li",[s._v("客户端收到服务端的 "),a("code",[s._v("FIN")]),s._v(" 报文后，回一个 "),a("code",[s._v("ACK")]),s._v(" 应答报文，之后进入 "),a("code",[s._v("TIME_WAIT")]),s._v(" 状态")]),s._v(" "),a("li",[s._v("服务器收到了 "),a("code",[s._v("ACK")]),s._v(" 应答报文后，就进入了 "),a("code",[s._v("CLOSED")]),s._v(" 状态，至此服务端已经完成连接的关闭。")]),s._v(" "),a("li",[s._v("客户端在经过 "),a("code",[s._v("2MSL")]),s._v(" 一段时间后，自动进入 "),a("code",[s._v("CLOSED")]),s._v(" 状态，至此客户端也完成连接的关闭。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20220705120213.png",alt:""}})]),s._v(" "),a("ul",[a("li",[a("p",[s._v("为什么挥手需要四次？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("关闭连接时，客户端向服务端发送 FIN 时，仅仅表示客户端不再发送数据了但是还能接收数据。\n服务器收到客户端的 FIN 报文时，先回一个 ACK 应答报文，而服务端可能还有数据需要处理和发送，等服务端不再发送数据时，才发送 FIN 报文给客户端来表示同意现在关闭连接。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("第一次挥手丢失了，会发生什么？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("当客户端（主动关闭方）调用 close 函数后，就会向服务端发送 FIN 报文，试图与服务端断开连接，此时客户端的连接进入到 FIN_WAIT_1 状态。\n\n正常情况下，如果能及时收到服务端（被动关闭方）的 ACK，则会很快变为 FIN_WAIT2状态。\n\n如果第一次挥手丢失了，那么客户端迟迟收不到被动方的 ACK 的话，也就会触发超时重传机制，重传 FIN 报文，重发次数由 tcp_orphan_retries 参数控制。\n\n当客户端重传 FIN 报文的次数超过 tcp_orphan_retries 后，就不再发送 FIN 报文，直接进入到 close 状态。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("第二次挥手丢失了，会发生什么？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("当服务端收到客户端的第一次挥手后，就会先回一个 ACK 确认报文，此时服务端的连接进入到 CLOSE_WAIT 状态。\n\n在前面我们也提了，ACK 报文是不会重传的，所以如果服务端的第二次挥手丢失了，客户端就会触发超时重传机制，重传 FIN 报文，直到收到服务端的第二次挥手，或者达到最大的重传次数。\n\n这里提一下，当客户端收到第二次挥手，也就是收到服务端发送的 ACK 报文后，客户端就会处于 FIN_WAIT2 状态，在这个状态需要等服务端发送第三次挥手，也就是服务端的 FIN 报文。\n\n对于 close 函数关闭的连接，由于无法再发送和接收数据，所以FIN_WAIT2 状态不可以持续太久，而 tcp_fin_timeout 控制了这个状态下连接的持续时长，默认值是 60 秒。\n\n这意味着对于调用 close 关闭的连接，如果在 60 秒后还没有收到 FIN 报文，客户端（主动关闭方）的连接就会直接关闭。\n\n但是注意，如果主动关闭方使用 shutdown 函数关闭连接且指定只关闭发送方向，而接收方向并没有关闭，那么意味着主动关闭方还是可以接收数据的。如果主动关闭方一直没收到第三次挥手，那么主动关闭方的连接将会一直处于 FIN_WAIT2 状态（tcp_fin_timeout 无法控制 shutdown 关闭的连接）。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("第三次挥手丢失了，会发生什么？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("当服务端（被动关闭方）收到客户端（主动关闭方）的 FIN 报文后，内核会自动回复 ACK，同时连接处于 CLOSE_WAIT 状态，顾名思义，它表示等待应用进程调用 close 函数关闭连接。\n\n此时，内核是没有权利替代进程关闭连接，必须由进程主动调用 close 函数来触发服务端发送 FIN 报文。\n\n服务端处于 CLOSE_WAIT 状态时，调用了 close 函数，内核就会发出 FIN 报文，同时连接进入 LAST_ACK 状态，等待客户端返回 ACK 来确认连接关闭。\n\n如果迟迟收不到这个 ACK，服务端就会重发 FIN 报文，重发次数仍然由 tcp_orphan_retries 参数控制，这与客户端重发 FIN 报文的重传次数控制方式是一样的。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("第四次挥手丢失了，会发生什么？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("当客户端收到服务端的第三次挥手的 FIN 报文后，就会回 ACK 报文，也就是第四次挥手，此时客户端连接进入 TIME_WAIT 状态。\n\n在 Linux 系统，TIME_WAIT 状态会持续 2MSL 后才会进入关闭状态。\n\n然后，服务端（被动关闭方）没有收到 ACK 报文前，还是处于 LAST_ACK 状态。\n\n如果第四次挥手的 ACK 报文没有到达服务端，服务端就会重发 FIN 报文，重发次数仍然由前面介绍过的 tcp_orphan_retries 参数控制。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("为什么需要 TIME_WAIT 状态？")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[s._v("主动发起关闭连接的一方，才会有 TIME"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("WAIT 状态。\n需要 TIME"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("WAIT 状态，主要是两个原因：\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 防止历史连接中的数据，被后面相同四元组的连接错误的接收；\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 保证「被动关闭连接」的一方，能被正确的关闭；\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"_2-tcp头部格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-tcp头部格式"}},[s._v("#")]),s._v(" 2. TCP头部格式")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20220705113738.png",alt:"TCP 头格式"}})]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("序列号")]),s._v("：在建立连接时由计算机生成的随机数作为其初始值，通过 SYN 包传给接收端主机，每发送一次数据，就「累加」一次该「数据字节数」的大小。"),a("strong",[s._v("用来解决网络包乱序问题。")])]),s._v(" "),a("li",[a("strong",[s._v("确认应答号")]),s._v("：指下一次「期望」收到的数据的序列号，发送端收到这个确认应答以后可以认为在这个序号以前的数据都已经被正常接收。"),a("strong",[s._v("用来解决丢包的问题")]),s._v("。")]),s._v(" "),a("li",[a("strong",[s._v("控制位")]),s._v("：\n"),a("ul",[a("li",[a("em",[s._v("ACK")]),s._v("：该位为 "),a("code",[s._v("1")]),s._v(" 时，「确认应答」的字段变为有效，TCP 规定除了最初建立连接时的 "),a("code",[s._v("SYN")]),s._v(" 包之外该位必须设置为 "),a("code",[s._v("1")]),s._v(" 。")]),s._v(" "),a("li",[a("em",[s._v("RST")]),s._v("：该位为 "),a("code",[s._v("1")]),s._v(" 时，表示 TCP 连接中出现异常必须强制断开连接。")]),s._v(" "),a("li",[a("em",[s._v("SYN")]),s._v("：该位为 "),a("code",[s._v("1")]),s._v(" 时，表示希望建立连接，并在其「序列号」的字段进行序列号初始值的设定。")]),s._v(" "),a("li",[a("em",[s._v("FIN")]),s._v("：该位为 "),a("code",[s._v("1")]),s._v(" 时，表示今后不会再有数据发送，希望断开连接。当通信结束希望断开连接时，通信双方的主机之间就可以相互交换 "),a("code",[s._v("FIN")]),s._v(" 位为 1 的 TCP 段。")])])])]),s._v(" "),a("h2",{attrs:{id:"udp协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#udp协议"}},[s._v("#")]),s._v(" UDP协议")]),s._v(" "),a("ul",[a("li",[s._v("不需要建立连接,速度特别快,可能会丢消息.")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20220705114346.png",alt:"UDP 头部格式"}})]),s._v(" "),a("ul",[a("li",[s._v("目标和源端口：主要是告诉 UDP 协议应该把报文发给哪个进程。")]),s._v(" "),a("li",[s._v("包长度：该字段保存了 UDP 首部的长度跟数据的长度之和。")]),s._v(" "),a("li",[s._v("校验和：校验和是为了提供可靠的 UDP 首部和数据而设计，防止收到在网络传输中受损的 UDP包。")])]),s._v(" "),a("h2",{attrs:{id:"tcp-udp-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-udp-的区别"}},[s._v("#")]),s._v(" tcp/udp 的区别!!!")]),s._v(" "),a("ul",[a("li",[s._v("由于 TCP 是面向连接，能保证数据的可靠性交付，因此经常用于：\n"),a("ul",[a("li",[a("code",[s._v("FTP")]),s._v(" 文件传输；")]),s._v(" "),a("li",[s._v("HTTP / HTTPS；")])])]),s._v(" "),a("li",[s._v("由于 UDP 面向无连接，它可以随时发送数据，再加上UDP本身的处理既简单又高效，因此经常用于：\n"),a("ul",[a("li",[s._v("包总量较少的通信，如 "),a("code",[s._v("DNS")]),s._v(" 、"),a("code",[s._v("SNMP")]),s._v(" 等；")]),s._v(" "),a("li",[s._v("视频、音频等多媒体通信；")]),s._v(" "),a("li",[s._v("广播通信；")])])])]),s._v(" "),a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-txt"}},[a("code",[s._v("#1. 连接\n\nTCP 是面向连接的传输层协议，传输数据前先要建立连接。\nUDP 是不需要连接，即刻传输数据。\n#2. 服务对象\n\nTCP 是一对一的两点服务，即一条连接只有两个端点。\nUDP 支持一对一、一对多、多对多的交互通信\n#3. 可靠性\n\nTCP 是可靠交付数据的，数据可以无差错、不丢失、不重复、按需到达。\nUDP 是尽最大努力交付，不保证可靠交付数据。\n#4. 拥塞控制、流量控制\n\nTCP 有拥塞控制和流量控制机制，保证数据传输的安全性。\nUDP 则没有，即使网络非常拥堵了，也不会影响 UDP 的发送速率。\n#5. 首部开销\n\nTCP 首部长度较长，会有一定的开销，首部在没有使用「选项」字段时是 20 个字节，如果使用了「选项」字段则会变长的。\nUDP 首部只有 8 个字节，并且是固定不变的，开销较小。\n#6. 传输方式\n\nTCP 是流式传输，没有边界，但保证顺序和可靠。\nUDP 是一个包一个包的发送，是有边界的，但可能会丢包和乱序。\n#7. 分片不同\n\nTCP 的数据大小如果大于 MSS 大小，则会在传输层进行分片，目标主机收到后，也同样在传输层组装 TCP 数据包，如果中途丢失了一个分片，只需要传输丢失的这个分片。\nUDP 的数据大小如果大于 MTU 大小，则会在 IP 层进行分片，目标主机收到后，在 IP 层组装完数据，接着再传给传输层。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("h2",{attrs:{id:"socket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#socket"}},[s._v("#")]),s._v(" socket")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("中文名字:套接字")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("Socket是应用层与传输层中间的抽象层，Socket帮助去组织拼接信息数据，以符合指定的协议。")])])]),s._v(" "),a("li",[a("p",[s._v("socket对于程序员来说,已经是网络操作的底层了")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20220705114641.png",alt:"image-20211024173450199"}})])])])])}),[],!1,null,null,null);a.default=e.exports}}]);