(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{400:function(n,t,a){"use strict";a.r(t);var s=a(3),e=Object(s.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("blockquote",[t("ul",[t("li",[n._v("Goroutine 和 channel 是 Go 语言并发编程的 两大基石。Goroutine 用于执行并发任务，channel 用于 goroutine 之间的同步、通信。")]),n._v(" "),t("li",[n._v("channel是Golang在语言层面提供的goroutine间的通信方式，比Unix管道更易用也更轻便, channel主要用于进程内各goroutine间通信.")])])]),n._v(" "),t("h2",{attrs:{id:"channel-数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#channel-数据结构"}},[n._v("#")]),n._v(" channel 数据结构  !!!")]),n._v(" "),t("ul",[t("li",[t("p",[t("code",[n._v("src/runtime/chan.go:hchan")])]),n._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("type")]),n._v(" hchan "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("struct")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    qcount   "),t("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("uint")]),n._v("           "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 当前队列中剩余元素个数")]),n._v("\n    dataqsiz "),t("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("uint")]),n._v("           "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 环形队列长度，即可以存放的元素个数")]),n._v("\n    buf      unsafe"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("Pointer "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 环形队列指针")]),n._v("\n    elemsize "),t("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("uint16")]),n._v("         "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 每个元素的大小")]),n._v("\n    closed   "),t("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("uint32")]),n._v("            "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 标识关闭状态")]),n._v("\n    elemtype "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("*")]),n._v("_type         "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 元素类型")]),n._v("\n    sendx    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("uint")]),n._v("           "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 队列下标，指示元素写入时存放到队列中的位置")]),n._v("\n    recvx    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("uint")]),n._v("           "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 队列下标，指示元素从队列的该位置读出")]),n._v("\n    recvq    waitq          "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 等待读消息的goroutine队列")]),n._v("\n    sendq    waitq          "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 等待写消息的goroutine队列")]),n._v("\n    lock mutex              "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 互斥锁，chan不允许并发读写")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br")])]),t("p",[t("em",[t("strong",[n._v("关闭的chan,并不是nil")])])])]),n._v(" "),t("li",[t("p",[n._v("Channel是异步进行的, channel存在3种状态：")]),n._v(" "),t("ul",[t("li",[n._v("nil，未初始化的状态，只进行了声明，或者手动赋值为nil")]),n._v(" "),t("li",[n._v("active，正常的channel，可读或者可写")]),n._v(" "),t("li",[n._v("closed，已关闭，千万不要误认为: 关闭channel后channel的值是nil")])])])]),n._v(" "),t("h3",{attrs:{id:"_1-环形队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-环形队列"}},[n._v("#")]),n._v(" 1. 环形队列")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("优点")]),n._v(" "),t("ol",[t("li",[n._v("避免假溢出现象（由于入队和出队的操作，头尾指针只增加不减少，致使被删元素的空间永远无法重新利用，当队列继续存储元素时，出现尾指针已经到达了队列尾，而实际头指针前面并未满的情况），可以将队列空间充分重复利用")]),n._v(" "),t("li",[n._v("首尾相连的FIFO的数据结构，采用数据的线性空间，数据组织简单，能快速知道队列是否满/空")]),n._v(" "),t("li",[n._v("广泛用于网络数据收发，和不同程序间数据交换，均使用了环形队列")])])]),n._v(" "),t("li",[t("p",[n._v("实现原理")]),n._v(" "),t("ul",[t("li",[n._v("内存上并没有环形的结构，因此环形队列实际上是数组的线性空间来实现的。")]),n._v(" "),t("li",[n._v("当数据到了尾部该如何处理呢？它将转回到原来位置进行处理，通过"),t("strong",[n._v("取模")]),n._v("操作来实现")])])]),n._v(" "),t("li",[t("p",[n._v("环形队列的几个判断条件")]),n._v(" "),t("ul",[t("li",[n._v("front:指向队列的第一个元素，初始值front=0")]),n._v(" "),t("li",[n._v("rear: 指向队列的"),t("strong",[n._v("最后一个元素的后一个位置")]),n._v("（预留一个空间作为约定）,初始值rear=0")]),n._v(" "),t("li",[n._v("maxSize: 数组的最大容量")]),n._v(" "),t("li",[n._v("队空：front == rear")]),n._v(" "),t("li",[t("strong",[n._v("队满：")]),n._v("(rear+1)%maxSize == front")]),n._v(" "),t("li",[n._v("队列中的有效数据个数：(rear+maxSize-front)% maxSize")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20220614115250394.png",alt:"image-20220614115250394"}})])]),n._v(" "),t("li",[t("p",[n._v("chan内部实现了一个环形队列作为其缓冲区，队列的长度是创建chan时指定的。")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20220706190210.png",alt:"image-20220614153110469"}})]),n._v(" "),t("ol",[t("li",[n._v("dataqsiz: 指示了队列长度为6，即可缓存6个元素；")]),n._v(" "),t("li",[n._v("buf: 指向队列的内存，队列中还剩余两个元素；")]),n._v(" "),t("li",[n._v("qcount: 表示队列中还有两个元素；")]),n._v(" "),t("li",[n._v("sendx : 后续写入的数据存储的位置，取值[0, 6)；")]),n._v(" "),t("li",[n._v("recvx: 指示从该位置读取数据, 取值[0, 6)；")])])])]),n._v(" "),t("h3",{attrs:{id:"_2-其他"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-其他"}},[n._v("#")]),n._v(" 2. 其他")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("从channel读数据，如果channel缓冲区为空或者没有缓冲区，当前goroutine会被阻塞。")])]),n._v(" "),t("li",[t("p",[n._v("向channel写数据，如果channel缓冲区已满或者没有缓冲区，当前goroutine会被阻塞。")])]),n._v(" "),t("li",[t("p",[n._v("被阻塞的goroutine将会挂在channel的等待队列中：")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("因读阻塞的goroutine会被向channel写入数据的goroutine唤醒；")])]),n._v(" "),t("li",[t("p",[n._v("因写阻塞的goroutine会被从channel读数据的goroutine唤醒；")])])])]),n._v(" "),t("li",[t("p",[n._v("一个channel只能传递一种类型的值，类型信息存储在hchan数据结构中。")]),n._v(" "),t("ul",[t("li",[n._v("elemtype代表类型，用于数据传递过程中的赋值；")]),n._v(" "),t("li",[n._v("elemsize代表类型大小，用于在buf中定位元素位置。")])])]),n._v(" "),t("li",[t("p",[n._v("一个channel同时仅允许被一个goroutine读写，为简单起见，本章后续部分说明读写过程时不再涉及加锁和解锁。")])])]),n._v(" "),t("h2",{attrs:{id:"channel-创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#channel-创建"}},[n._v("#")]),n._v(" channel 创建")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("创建channel的过程实际上是初始化hchan结构。其中类型信息和缓冲区长度由make语句传入，buf的大小则与元素大小和缓冲区长度共同决定。")]),n._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 伪代码")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("func")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("makechan")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("t "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("*")]),n._v("chantype"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" size "),t("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("*")]),n._v("hchan "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("var")]),n._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("*")]),n._v("hchan\n    c "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("new")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("hchan"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n    c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("buf "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("malloc")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("元素类型大小"),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("*")]),n._v("size"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n    c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("elemsize "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" 元素类型大小\n    c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("elemtype "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" 元素类型\n    c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("dataqsiz "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" size\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("return")]),n._v(" c\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br")])])])]),n._v(" "),t("h2",{attrs:{id:"channel-读写"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#channel-读写"}},[n._v("#")]),n._v(" channel 读写  !!!")]),n._v(" "),t("h3",{attrs:{id:"_1-写-channel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-写-channel"}},[n._v("#")]),n._v(" 1. 写 channel")]),n._v(" "),t("ol",[t("li",[n._v("如果等待接收队列"),t("code",[n._v("recvq")]),n._v("不为空, 说明channel缓冲区没有数据或者说没有缓冲区, 此时直接从recvq取出G,并把数据写入，最后把该G唤醒，结束发送过程；")]),n._v(" "),t("li",[n._v("如果等待接收队列"),t("code",[n._v("recvq")]),n._v("为空, 如果缓冲区中有空余位置，将数据写入缓冲区，结束发送过程；")]),n._v(" "),t("li",[n._v("如果等待接收队列"),t("code",[n._v("recvq")]),n._v("为空, 如果缓冲区中没有空余位置，将待发送数据写入G，将当前G加入sendq，进入睡眠，等待被读goroutine唤醒；")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/m_b235ef1f2c6ac1b5d63ec5660da97bd2_r.png",alt:"null"}})]),n._v(" "),t("h3",{attrs:{id:"_2-读-channel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-读-channel"}},[n._v("#")]),n._v(" 2. 读 channel")]),n._v(" "),t("ol",[t("li",[t("p",[n._v("如果等待发送队列"),t("code",[n._v("send")]),n._v("为空, 缓冲区中有数据, 从缓冲区取出一个数据结束接收过程;")])]),n._v(" "),t("li",[t("p",[n._v("如果等待发送队列"),t("code",[n._v("send")]),n._v("为空, 且没有缓冲区, 将当前goroutine加入recvq, 等待被写入的goroutine唤醒;")])]),n._v(" "),t("li",[t("p",[n._v("如果等待发送队列"),t("code",[n._v("send")]),n._v("不为空, 且没有缓冲区, 直接从sendq中取出G，把G中数据读出，最后把G唤醒，结束读取过程；")])]),n._v(" "),t("li",[t("p",[n._v("如果等待发送队列sendq不为空，此时说明缓冲区已满，从缓冲区中首部读出数据，把G中数据写入缓冲区尾部，把G唤醒，结束读取过程；")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20220614162342583.png",alt:"image-20220614162342583"}})])])]),n._v(" "),t("h3",{attrs:{id:"_3-关闭-channel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-关闭-channel"}},[n._v("#")]),n._v(" 3. 关闭 channel")]),n._v(" "),t("ul",[t("li",[n._v("关闭channel时会把recvq中的G全部唤醒，本该写入G的数据位置为nil。把sendq中的G全部唤醒，但这些G会panic。")]),n._v(" "),t("li",[n._v("panic场景:\n"),t("ol",[t("li",[n._v("关闭值为nil的channel")]),n._v(" "),t("li",[n._v("关闭已经被关闭的channel")]),n._v(" "),t("li",[n._v("向已经关闭的channel写数据")])])])]),n._v(" "),t("h2",{attrs:{id:"channel-常见用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#channel-常见用法"}},[n._v("#")]),n._v(" channel 常见用法")]),n._v(" "),t("h3",{attrs:{id:"_1-select"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-select"}},[n._v("#")]),n._v(" 1. select")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("select可以监控多channel，比如监控多个channel，当其中某一个channel有数据时，就从其读出数据。")])]),n._v(" "),t("li",[t("p",[n._v("demo")]),n._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("for")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("select")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("case")]),n._v(" e "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v(":=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<-")]),n._v(" chan1 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v("\n            fmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("Printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('"Get element from chan1: %d\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("case")]),n._v(" e "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v(":=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<-")]),n._v(" chan2 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v("\n            fmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("Printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('"Get element from chan2: %d\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("default")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v("\n            fmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("Printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('"No element in chan1 and chan2.\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n            time"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("Sleep")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("*")]),n._v(" time"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("Second"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br")])]),t("blockquote",[t("p",[t("strong",[n._v("select的case语句读channel不会阻塞，尽管channel中没有数据")]),n._v("。这是由于case语句编译后调用读channel时会明确传入不阻塞的参数，此时读不到数据时不会将当前goroutine加入到等待队列，而是直接返回。")])])])]),n._v(" "),t("h3",{attrs:{id:"_2-range"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-range"}},[n._v("#")]),n._v(" 2. range")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("通过range可以持续从channel中读出数据，好像在遍历一个数组一样,当channel中没有数据时会阻塞当前goroutine，与读channel时阻塞处理机制一样。 但是当channel关闭时, range自动跳出!")]),n._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("func")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\tcha "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v(":=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("make")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("chan")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("go")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("func")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("for")]),n._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v(":=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("++")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\t\t\tcha "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<-")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("for")]),n._v(" e "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v(":=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("range")]),n._v(" cha "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br")])])])]),n._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[n._v("#")]),n._v(" 总结")]),n._v(" "),t("blockquote",[t("p",[t("strong",[n._v("空读写阻塞，写关闭异常，读关闭空零")])])]),n._v(" "),t("ol",[t("li",[t("p",[n._v("什么时候panic:")]),n._v(" "),t("ul",[t("li",[n._v("写已经关闭的channel")]),n._v(" "),t("li",[n._v("关闭已经关闭的channel")]),n._v(" "),t("li",[n._v("关闭值为nil的channel")])])]),n._v(" "),t("li",[t("p",[n._v("什么时候阻塞:")]),n._v(" "),t("ul",[t("li",[n._v("读写为nil的channel")]),n._v(" "),t("li",[n._v("缓冲区满了而且读写未全部就绪")])])]),n._v(" "),t("li",[t("p",[n._v("读关闭空零: 读取关闭的channel, 会将缓冲区数据全部读出, 然后读出零值.")])]),n._v(" "),t("li",[t("p",[n._v("当channel关闭时, range自动跳出!")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);