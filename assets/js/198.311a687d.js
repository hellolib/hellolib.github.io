(window.webpackJsonp=window.webpackJsonp||[]).push([[198],{518:function(s,a,t){"use strict";t.r(a);var e=t(3),r=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("blockquote",[a("p",[a("a",{attrs:{href:"https://xiaolincoding.com/redis/cluster/sentinel.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89%E5%93%A8%E5%85%B5%E6%9C%BA%E5%88%B6",target:"_blank",rel:"noopener noreferrer"}},[s._v("哨兵详细文档"),a("OutboundLink")],1)])]),s._v(" "),a("h2",{attrs:{id:"redis主从架构如何高可用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis主从架构如何高可用"}},[s._v("#")]),s._v(" Redis主从架构如何高可用")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("方案")]),s._v(" "),a("ul",[a("li",[s._v("当Redis的master节点宕机后，redis的高可用架构中，有一个故障转移，叫failover，也可以做主备切换。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20220616150625.png",alt:"redis基于哨兵的高可用性"}})])]),s._v(" "),a("li",[a("p",[s._v("Redis高可用：如果用主从架构部署，在加上哨兵就可以实现任何一个实例宕机，就会自动进行主备切换。")])])]),s._v(" "),a("h2",{attrs:{id:"redis哨兵架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis哨兵架构"}},[s._v("#")]),s._v(" Redis哨兵架构")]),s._v(" "),a("h3",{attrs:{id:"_1-哨兵介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-哨兵介绍"}},[s._v("#")]),s._v(" 1. 哨兵介绍")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("entinal，中文名是哨兵")])]),s._v(" "),a("li",[a("p",[s._v("哨兵是redis集群架构中非常重要的一个组件，"),a("strong",[s._v("主要功能")]),s._v("如下")]),s._v(" "),a("ul",[a("li",[s._v("集群监控，负责监控redis master和slave进程是否正常工作")]),s._v(" "),a("li",[s._v("消息通知，如果某个redis实例有故障，那么哨兵负责发送消息作为报警通知给管理员")]),s._v(" "),a("li",[s._v("故障转移，如果master node挂掉了，会自动转移到slave node上")]),s._v(" "),a("li",[s._v("配置中心，如果故障转移发生了，通知client客户端新的master地址")])])]),s._v(" "),a("li",[a("p",[s._v("哨兵本身也是分布式的，作为一个哨兵集群去运行，互相协同工作")]),s._v(" "),a("ul",[a("li",[s._v("故障转移时，判断一个master node是宕机了，需要大部分的哨兵都同意才行，涉及到了分布式选举的问题")]),s._v(" "),a("li",[s._v("即使部分哨兵节点挂掉了，哨兵集群还是能正常工作的，因为如果一个作为高可用机制重要组成部分的故障转移系统本身是单点的，那就很坑爹了")])])]),s._v(" "),a("li",[a("p",[s._v("目前采用的是sentinal 2版本，sentinal 2相对于sentinal 1来说，重写了很多代码，主要是让故障转移的机制和算法变得更加健壮和简单")])])]),s._v(" "),a("h3",{attrs:{id:"_2-哨兵的核心知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-哨兵的核心知识"}},[s._v("#")]),s._v(" 2. 哨兵的核心知识")]),s._v(" "),a("ul",[a("li",[s._v("哨兵至少需要3个实例，来保证自己的健壮性")]),s._v(" "),a("li",[s._v("哨兵 + redis主从的部署架构，是不会保证数据零丢失的，只能保证redis集群的高可用性")]),s._v(" "),a("li",[s._v("对于哨兵 + redis主从这种复杂的部署架构，尽量在测试环境和生产环境，都进行充足的测试和演练")])]),s._v(" "),a("h3",{attrs:{id:"_3-哨兵选举机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-哨兵选举机制"}},[s._v("#")]),s._v(" 3. 哨兵选举机制")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("哨兵集群必须部署2个以上节点")])])]),s._v(" "),a("h4",{attrs:{id:"a-两个哨兵-❎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-两个哨兵-❎"}},[s._v("#")]),s._v(" a. 两个哨兵 ❎")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("如果哨兵集群仅仅部署了个2个哨兵实例，s1 和 s2，quorum=1")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("+----+         +----+\n| M1 |---------| R1 |\n| S1 |         | S2 |\n+----+         +----+\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("Configuration: quorum = 1")])]),s._v(" "),a("li",[a("p",[s._v("master宕机，s1和s2中只要有1个哨兵认为master宕机就可以还行切换，同时s1和s2中会选举出一个哨兵来执行故障转移同时这个时候，需要majority，也就是大多数哨兵都是运行的，2个哨兵的majority就是2（2的majority=2，3的majority=2，5的majority=3，4的majority=2），2个哨兵都运行着，就可以允许执行故障转移但是如果整个M1和S1运行的机器宕机了，那么哨兵只有1个了，此时就没有majority来允许执行故障转移，虽然另外一台机器还有一个R1，但是故障转移不会执行")])])]),s._v(" "),a("h4",{attrs:{id:"b-三个哨兵-✅"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-三个哨兵-✅"}},[s._v("#")]),s._v(" b. 三个哨兵 ✅")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("       +----+\n       | M1 |\n       | S1 |\n       +----+\n          |\n+----+    |    +----+\n| R2 |----+----| R3 |\n| S2 |         | S3 |\n+----+         +----+\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("Configuration: quorum = 2，majority")]),s._v(" "),a("p",[s._v("如果M1所在机器宕机了，那么三个哨兵还剩下2个，S2和S3可以一致认为master宕机，然后选举出一个来执行故障转移，同时3个哨兵的majority是2，所以还剩下的2个哨兵运行着，就可以允许执行故障转移")]),s._v(" "),a("h2",{attrs:{id:"redis主备切换的数据丢失问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis主备切换的数据丢失问题"}},[s._v("#")]),s._v(" Redis主备切换的数据丢失问题")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("异步复制数据丢失")]),s._v(": 因为master -> slave的复制是异步的，所以可能有部分数据还没复制到slave，master就宕机了，此时这些部分数据就丢失了。")]),s._v(" "),a("li",[a("strong",[s._v("脑裂导致的数据丢失")]),s._v(".")])]),s._v(" "),a("h3",{attrs:{id:"_1-异步复制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-异步复制"}},[s._v("#")]),s._v(" 1. 异步复制")]),s._v(" "),a("ul",[a("li",[s._v("因为master -> slave的复制是异步的，所以可能有部分数据还没复制到slave，master就宕机了，此时这些部分数据就丢失了。")])]),s._v(" "),a("h3",{attrs:{id:"_2-集群脑裂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-集群脑裂"}},[s._v("#")]),s._v(" 2. 集群脑裂")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("脑裂，也就是说，某个master所在机器突然脱离了正常的网络，跟其他slave机器不能连接，但是实际上master还运行着，此时哨兵可能就会认为master宕机了，然后开启选举，将其他slave切换成了master")])]),s._v(" "),a("li",[a("p",[s._v("这个时候，集群里就会有两个master，也就是所谓的脑裂。此时虽然某个slave被切换成了master，但是可能client还没来得及切换到新的master，还继续写向旧master的数据可能也丢失了")])]),s._v(" "),a("li",[a("p",[s._v("因此旧master再次恢复的时候，会被作为一个slave挂到新的master上去，自己的数据会清空，重新从新的master复制数据; 同时原来的master节点上的，client像 旧的 master中写入数据，当网络分区恢复正常后，client写的数据就会因为复制，导致数据的丢失。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20220616150636.png",alt:"image-20220615193015108"}})])])]),s._v(" "),a("h3",{attrs:{id:"_3-解决办法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-解决办法"}},[s._v("#")]),s._v(" 3. 解决办法")]),s._v(" "),a("blockquote",[a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("min-slaves-to-write "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nmin-slaves-max-lag "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[a("p",[s._v("要求至少有1个slave，数据复制和同步的延迟不能超过10秒")])]),s._v(" "),a("li",[a("p",[s._v("如果说一旦所有的slave，数据复制和同步的延迟都超过了10秒钟，那么这个时候，master就不会再接收任何请求了，上面两个配置可以减少异步复制和脑裂导致的数据丢失")])])])]),s._v(" "),a("ol",[a("li",[a("p",[a("strong",[s._v("减少异步复制的数据丢失")])]),s._v(" "),a("ul",[a("li",[s._v("有了min-slaves-max-lag这个配置，就可以确保说，一旦slave复制数据和ack延时太长，就认为可能master宕机后损失的数据太多了，那么就拒绝写请求，这样可以把master宕机时由于部分数据未同步到slave导致的数据丢失降低的可控范围内")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20220616150644.png",alt:"image-20220615193308313"}})])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("减少脑裂的数据丢失")])]),s._v(" "),a("ul",[a("li",[s._v("如果一个master出现了脑裂，跟其他slave丢了连接，那么上面两个配置可以确保说，如果不能继续给指定数量的slave发送数据，而且slave超过10秒没有给自己ack消息，那么就直接拒绝客户端的写请求，这样脑裂后的旧master就不会接受client的新数据，也就避免了数据丢失，上面的配置就确保了，如果跟任何一个slave丢了连接，在10秒后发现没有slave给自己ack，那么就拒绝新的写请求，因此在脑裂场景下，最多就丢失10秒的数据")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20220616150647.png",alt:"image-20220615193426456"}})])])])])}),[],!1,null,null,null);a.default=r.exports}}]);