(window.webpackJsonp=window.webpackJsonp||[]).push([[185],{505:function(a,s,t){"use strict";t.r(s);var e=t(3),i=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"事务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事务"}},[a._v("#")]),a._v(" 事务")]),a._v(" "),s("ul",[s("li",[a._v("ACID\n"),s("ul",[s("li",[a._v("A: 原子性")]),a._v(" "),s("li",[a._v("C: 一致性")]),a._v(" "),s("li",[a._v("I: 隔离性")]),a._v(" "),s("li",[a._v("D: 持久性")])])])]),a._v(" "),s("h2",{attrs:{id:"redis事务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis事务"}},[a._v("#")]),a._v(" redis事务")]),a._v(" "),s("blockquote",[s("p",[a._v("redis 事务并不是真正意义上的事务, 原因:")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("Redis 作者认为发生事务回滚的原因大部分都是程序错误导致，这种情况一般发生在开发和测试阶段，而生产环境很少出现。")])]),a._v(" "),s("li",[s("p",[a._v("对于逻辑性错误，比如本来应该把一个数加 1 ，但是程序逻辑写成了加 2，那么这种错误也是无法通过事务回滚来进行解决的。")])]),a._v(" "),s("li",[s("p",[a._v("Redis 追求的是简单高效，而传统事务的实现相对比较复杂，这和 Redis 的设计思想相违背。")])])])]),a._v(" "),s("ul",[s("li",[s("p",[a._v("redis可以把一组操作包装在一个事务块中，让这些语句的执行具有原子性")]),a._v(" "),s("ul",[s("li",[a._v("multi：开启事务")]),a._v(" "),s("li",[a._v("exec：执行事务")]),a._v(" "),s("li",[a._v("discard：取消事务")]),a._v(" "),s("li",[a._v("watch：监视")])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("Redis中的事务原理：就是以multi为起点，在提交之前，先把所有的语句都放在一个队列中，直到exec才做事务的提交")])])]),a._v(" "),s("li",[s("p",[a._v("示例")]),a._v(" "),s("div",{staticClass:"language-redis line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("set user?account 1000\nget user?account\nset user:101:account 10\nget user:101:account\n\nmulti\ndecrby user?account 500   // 转出500\nincrby user:101:account 500  //转入500\nexec\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br")])]),s("ul",[s("li",[s("p",[a._v("Redis中，单条命令是原子性执行的，但事务不保证原子性，且没有回滚。事务中任意命令执行失败，其余的命令仍会被执行。")])]),a._v(" "),s("li",[s("p",[a._v("其中，Redis事务分为三个阶段")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("开始事务")])]),a._v(" "),s("li",[s("p",[a._v("命令入队")])]),a._v(" "),s("li",[s("p",[a._v("执行事务")])])])])])])]),a._v(" "),s("h3",{attrs:{id:"a-正常执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a-正常执行"}},[a._v("#")]),a._v(" a. 正常执行")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20220616112854.png",alt:"image-20220616112854323"}})]),a._v(" "),s("h3",{attrs:{id:"b-放弃事务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#b-放弃事务"}},[a._v("#")]),a._v(" b. 放弃事务")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20220616112805.png",alt:"image-20200529212259619"}})]),a._v(" "),s("h3",{attrs:{id:"c-事务执行出错-命令错误"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#c-事务执行出错-命令错误"}},[a._v("#")]),a._v(" c. 事务执行出错 - 命令错误")]),a._v(" "),s("p",[a._v("若在事务队列中存在命令性错误（类似于java编译性错误），则执行EXEC命令时，所有命令都不会执行")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20220616144133.png",alt:"image-20220616144133889"}})]),a._v(" "),s("h3",{attrs:{id:"d-事务执行出错-抛异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#d-事务执行出错-抛异常"}},[a._v("#")]),a._v(" d. 事务执行出错 - 抛异常")]),a._v(" "),s("p",[a._v("若在事务队列中存在语法性错误（类似于java的1/0的运行时异常），则执行EXEC命令时，其他正确命令会被执行，错误命令抛出异常")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20220616144139.png",alt:"image-20220616144139189"}})]),a._v(" "),s("h2",{attrs:{id:"watch-命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#watch-命令"}},[a._v("#")]),a._v(" watch 命令")]),a._v(" "),s("h3",{attrs:{id:"_1-watch-命令的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-watch-命令的作用"}},[a._v("#")]),a._v(" 1. watch 命令的作用")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("watch 命令可以为 Redis 事务提供 CAS 乐观锁行为，它可以在 exec 命令执行之前，监视任意 key 值的变化，也就是说当多个线程更新同一个 key 值的时候，会跟原值做比较，一旦发现它被修改过，则拒绝执行命令，并且会返回 nil 给客户端。下面还是让我们通过一个示例来演示一下。")])]),a._v(" "),s("li",[s("p",[a._v("打开一个客户端一，依次执行如下命令：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("flushall  //清空数据库\nwatch name //监视 name\nmulti     //开启事务\nset name lonely_wolf //设置 name\nset age 18 // 设置 age\nget name   //获取 name\nget age    //获取 age\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])])]),a._v(" "),s("li",[s("p",[a._v("执行之后得到如下效果图：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/JfTPiahTHJhoYTxOjMdxryHl7fT6aiaGMJHUQ9aKGyN6GNIBx5bHFVicvQlTx25Yc6EC9VmxYdu57MhZRQ3DZNf2A/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})])]),a._v(" "),s("li",[s("p",[a._v("这时候再打开一个客户端二，执行 "),s("code",[a._v("set name zhangsan")]),a._v("命令：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/JfTPiahTHJhoYTxOjMdxryHl7fT6aiaGMJ6jQjsib9Ziazue3IoUicDqwc3qnqcQ9EPttA1icyOvpN2hbuR6NKh5q9lg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})])]),a._v(" "),s("li",[s("p",[a._v("然后再回到客户端一执行 exec命令。这时候会发现直接返回了 nil，也就是事务中所有的命令都没有被执行（即：只要检测到一个 key 值被修改过，那么整个事务都不会被执行）：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/JfTPiahTHJhoYTxOjMdxryHl7fT6aiaGMJVNxqRCuG6JYM0avnyYQmcVbjn9NZmW5dbwqZaHhdkLXpB8GVJvePew/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})])])]),a._v(" "),s("h3",{attrs:{id:"_2-watch-原理分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-watch-原理分析"}},[a._v("#")]),a._v(" 2. watch 原理分析")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("下面是一个 Redis 服务的数据结构定义：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("typedef struct redisDb {\n    dict *watched_keys;  //被 watch 命令监视的 key\n    int id;           //Database ID\n    //...省略了其他属性\n} redisDb;\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])])]),a._v(" "),s("li",[s("p",[a._v("redisDb 中的 "),s("code",[a._v("watched_keys")]),a._v(" 存储了一个字典，这个字典当中的 key 存的就是被监视的 key ，然后字典的值存的就是客户端 id。然后每个客户端还有一个标记属性 "),s("code",[a._v("CLIENT_DIRTY_CAS")]),a._v("，一旦我们执行了一些如 set，sadd 等能修改 key 值对应 value 的命令，那么客户端的 "),s("code",[a._v("CLIENT_DIRTY_CAS")]),a._v(" 标记属性将会被修改，后面执行事务提交命令 exec 时发现客户端的标记属性被修改过（乐观锁的体现），则会拒绝执行事务。")])])])])}),[],!1,null,null,null);s.default=i.exports}}]);