(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{371:function(s,t,a){"use strict";a.r(t);var n=a(3),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"_1-sync-pool"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-sync-pool"}},[s._v("#")]),s._v(" 1. sync.Pool")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("sync.Pool 除了最常见的池化提升性能的思路，最重要的是减少 GC 。")])]),s._v(" "),t("li",[t("p",[s._v("常用于一些对象实例创建昂贵的场景。注意，Pool 是 Goroutine 并发安全的。\n")])]),s._v(" "),t("li",[t("p",[s._v("可以作为保存临时取还对象的一个“池子”。")])]),s._v(" "),t("li",[t("p",[s._v("特点")]),s._v(" "),t("ol",[t("li",[s._v("Goroutine 并发安全的")]),s._v(" "),t("li",[s._v("存储的都是临时对象")]),s._v(" "),t("li",[s._v("自动移除, 清理完全是由runtime控制的, 随时都可能被无通知清除")]),s._v(" "),t("li",[s._v("当这个对象的引用只有sync.Pool持有时，这个对象内存会被释放")]),s._v(" "),t("li",[s._v("目的就是缓存并重用对象，减少GC的压力")]),s._v(" "),t("li",[s._v("自动扩容、缩容")]),s._v(" "),t("li",[s._v("不能对 Pool.Get 出来的对象做预判，有可能是新的（新分配的），有可能是旧的（之前人用过，然后 Put 进去的）")]),s._v(" "),t("li",[s._v("当用完一个从 Pool 取出的实例时候，一定要记得调用 Put，否则 Pool 无法复用这个实例，通常这个用 defer 完成；")])])]),s._v(" "),t("li",[t("p",[s._v("应用场景")]),s._v(" "),t("ol",[t("li",[s._v("当多个 goroutine 都需要创建同⼀个对象的时候，如果 goroutine 数过多，导致对象的创建数⽬剧增，进⽽导致 GC 压⼒增大。形成 “并发⼤－占⽤内存⼤－GC 缓慢－处理并发能⼒降低－并发更⼤”这样的恶性循环。")]),s._v(" "),t("li",[s._v("对于很多需要重复分配、回收内存的地方，sync.Pool 是一个很好的选择。频繁地分配、回收内存会给 GC 带来一定的负担，严重的时候会引起 CPU 的毛刺，而 sync.Pool 可以将暂时不用的对象缓存起来，待下次需要的时候直接使用，不用再次经过内存分配，复用对象的内存，减轻 GC 的压力，提升系统的性能。")]),s._v(" "),t("li",[s._v("标准库中 "),t("code",[s._v("encoding/json")]),s._v(" 也用到了 sync.Pool 来提升性能。")]),s._v(" "),t("li",[s._v("著名的 "),t("code",[s._v("gin")]),s._v(" 框架，对 context 取用也到了 "),t("code",[s._v("sync.Pool")]),s._v("。")]),s._v(" "),t("li",[s._v("fasthttp 大量使用sync.Pool")])])])]),s._v(" "),t("h2",{attrs:{id:"_2-string相关"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-string相关"}},[s._v("#")]),s._v(" 2. string相关")]),s._v(" "),t("h3",{attrs:{id:"_2-1-字符串拼接-strings-builder"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-字符串拼接-strings-builder"}},[s._v("#")]),s._v(" 2.1 字符串拼接 strings.Builder")]),s._v(" "),t("blockquote",[t("p",[s._v("官网说: A Builder is used to efficiently build a string using Write methods. It minimizes memory copying.")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("字符串拼接方法")]),s._v(" "),t("ol",[t("li",[s._v("使用 "),t("code",[s._v("+")])]),s._v(" "),t("li",[s._v("使用"),t("code",[s._v("fmt.Sprintf")])]),s._v(" "),t("li",[s._v("使用"),t("code",[s._v("strings.Builder")])]),s._v(" "),t("li",[s._v("使用"),t("code",[s._v("strings.Buffer")])]),s._v(" "),t("li",[s._v("使用"),t("code",[s._v("bytes.Buffer")])])])]),s._v(" "),t("li",[t("p",[s._v("从基准测试的结果来看，使用 "),t("code",[s._v("+")]),s._v(" 和 "),t("code",[s._v("fmt.Sprintf")]),s._v(" 的效率是最低的，和其余的方式相比，性能相差约 1000 倍，而且消耗了超过 1000 倍的内存。当然 "),t("code",[s._v("fmt.Sprintf")]),s._v(" 通常是用来格式化字符串的，一般不会用来拼接字符串。")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("strings.Builder")]),s._v("、"),t("code",[s._v("bytes.Buffer")]),s._v(" 和 "),t("code",[s._v("[]byte")]),s._v(" 的性能差距不大，而且消耗的内存也十分接近，性能最好且消耗内存最小的是 "),t("code",[s._v("preByteConcat")]),s._v("，这种方式预分配了内存，在字符串拼接的过程中，不需要进行字符串的拷贝，也不需要分配新的内存，因此性能最好，且内存消耗最小。")])]),s._v(" "),t("li",[t("p",[s._v("string.Builder 和 +")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("字符串在 Go 语言中是不可变类型，占用内存大小是固定的，当使用 "),t("code",[s._v("+")]),s._v(" 拼接 2 个字符串时，生成一个新的字符串，那么就需要开辟一段新的空间，新空间的大小是原来两个字符串的大小之和。拼接第三个字符串时，再开辟一段新空间，新空间大小是三个字符串大小之和，以此类推。假设一个字符串大小为 10 byte，拼接 1w 次，需要申请的内存大小为：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("10 + 2 * 10 + 3 * 10 + ... + 10000 * 10 byte = 500 MB \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("而 "),t("code",[s._v("strings.Builder")]),s._v("，"),t("code",[s._v("bytes.Buffer")]),s._v("，包括切片 "),t("code",[s._v("[]byte")]),s._v(" 的内存是以倍数申请的。例如，初始大小为 0，当第一次写入大小为 10 byte 的字符串时，则会申请大小为 16 byte 的内存（恰好大于 10 byte 的 2 的指数），第二次写入 10 byte 时，内存不够，则申请 32 byte 的内存，第三次写入内存足够，则不申请新的，以此类推。在实际过程中，超过一定大小，比如 2048 byte 后，申请策略上会有些许调整。")]),s._v(" "),t("ul",[t("li",[s._v("2048 以前按倍数申请，2048 之后，以 640 递增，最后一次递增 24576 到 122880。总共申请的内存大小约 "),t("code",[s._v("0.52 MB")]),s._v("，约为上一种方式的千分之一。")])])])])]),s._v(" "),t("li",[t("p",[s._v("strings.Builder 和 bytes.Buffer")]),s._v(" "),t("ul",[t("li",[t("p",[t("code",[s._v("strings.Builder")]),s._v(" 和 "),t("code",[s._v("bytes.Buffer")]),s._v(" 底层都是 "),t("code",[s._v("[]byte")]),s._v(" 数组，但 "),t("code",[s._v("strings.Builder")]),s._v(" 性能比 "),t("code",[s._v("bytes.Buffer")]),s._v(" 略快约 10% 。一个比较重要的区别在于，"),t("code",[s._v("bytes.Buffer")]),s._v(" 转化为字符串时重新申请了一块空间，存放生成的字符串变量，而 "),t("code",[s._v("strings.Builder")]),s._v(" 直接将底层的 "),t("code",[s._v("[]byte")]),s._v(" 转换成了字符串类型返回了回来。")]),s._v(" "),t("ul",[t("li",[s._v("bytes.Buffer")])]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// To build strings more efficiently, see the strings.Builder type.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("Buffer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Special case, useful in debugging.")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<nil>"')]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("buf"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("off"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("ul",[t("li",[s._v("strings.Builder")])]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// String returns the accumulated string.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("Builder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("unsafe"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Pointer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("buf"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])])])])])]),s._v(" "),t("h3",{attrs:{id:"_2-2-字符串截取-strings-repeat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-字符串截取-strings-repeat"}},[s._v("#")]),s._v(" 2.2 字符串截取 strings.Repeat")]),s._v(" "),t("blockquote",[t("p",[s._v("一个子字符串表达式的结果（子）字符串和基础字符共享一个承载底层字节序列的内存块。不仅节省内存，而且还减少了CPU消耗。 但是有时候它会造成暂时性的内存泄露。")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("demo")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" s0 "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 一个包级变量")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 一个演示目的函数。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1 "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\ts0 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 目前，s0和s1共享着承载它们的字节序列的同一个内存块。")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 虽然s1到这里已经不再被使用了，但是s0仍然在使用中，")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 所以它们共享的内存块将不会被回收。虽然此内存块中")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 只有50字节被真正使用，而其它字节却无法再被使用。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("demo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\ts "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("createStringWithLengthOnHeap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1M bytes")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("解决办法")])]),s._v(" "),t("ol",[t("li",[t("p",[s._v("将子字符串表达式的结果转换为一个字节切片，然后再转换回来。此种防止临时性内存泄露的方法不是很高效，因为在此过程中底层的字节序列被复制了两次，其中一次是不必要的。")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1 "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\ts0 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("byte")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])])])])])]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[s._v("["),t("strong",[s._v("推荐")]),s._v("]使用"),t("code",[s._v("strings.Builder")]),s._v("类型来防止一次不必要的复制。")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"strings"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1 "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" b strings"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Builder\n    b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Grow")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("WriteString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    s0 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("使用"),t("code",[s._v("strings.Repeat")]),s._v(", 此方法底层也是"),t("code",[s._v("strings.Builder")]),s._v("的封装")])])]),s._v(" "),t("h2",{attrs:{id:"_3-使用协程池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用协程池"}},[s._v("#")]),s._v(" 3. 使用协程池")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("协程池作用")]),s._v(" "),t("ol",[t("li",[s._v("可以限制goroutine数量，避免无限制的增长。")]),s._v(" "),t("li",[s._v("减少栈扩容的次数。")]),s._v(" "),t("li",[s._v("频繁创建goroutine的场景下，资源复用，节省内存。（需要一定规模。一般场景下，效果不太明显。）")])])]),s._v(" "),t("li",[t("p",[s._v("推荐第三方库 "),t("a",{attrs:{href:"https://github.com/panjf2000/ants",target:"_blank",rel:"noopener noreferrer"}},[s._v("ants"),t("OutboundLink")],1)])]),s._v(" "),t("li",[t("p",[s._v("go对goroutine有一定的复用能力。所以要根据场景选择是否使用协程池，不恰当的场景不仅得不到收益，反而增加系统复杂性。")])])]),s._v(" "),t("h2",{attrs:{id:"_4-for-和-range-选择"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-for-和-range-选择"}},[s._v("#")]),s._v(" 4. for 和 range 选择")]),s._v(" "),t("ul",[t("li",[s._v("range 在迭代过程中返回的是迭代值的拷贝")]),s._v(" "),t("li",[s._v("如果每次迭代的元素的内存占用很低，那么 for 和 range 的性能几乎是一样，例如 "),t("code",[s._v("[]int")]),s._v("。")]),s._v(" "),t("li",[s._v("如果迭代的元素内存占用较高，例如一个包含很多属性的 struct 结构体，那么 for 的性能将显著地高于 range，有时候甚至会有上千倍的性能差异。对于这种场景，建议使用 for，如果使用 range，建议只迭代下标，通过下标访问迭代值，这种使用方式和 for 就没有区别了。")]),s._v(" "),t("li",[s._v("如果想使用 range 同时迭代下标和值，则需要将切片/数组的元素改为指针，才能不影响性能。")]),s._v(" "),t("li",[s._v("尽量使用for,而不是range")])]),s._v(" "),t("h2",{attrs:{id:"_5-减小锁的资源消耗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-减小锁的资源消耗"}},[s._v("#")]),s._v(" 5. 减小锁的资源消耗")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("对临界区加锁比较常见, 性能损耗也是非常严重的")])]),s._v(" "),t("li",[t("p",[s._v("标准库中sync.map针对读操作的优化消除了rwlock，是一个标准的案例. 用原子操作代替互斥锁也是一种经典的lock-free技巧。")])])]),s._v(" "),t("h2",{attrs:{id:"_6-不要使用反射-除非忍不住"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-不要使用反射-除非忍不住"}},[s._v("#")]),s._v(" 6. 不要使用反射, 除非忍不住")]),s._v(" "),t("ul",[t("li",[s._v("反射可以帮助抽象和简化代码，提高开发效率。但是go语言反射效率不高.")]),s._v(" "),t("li",[s._v("反射创建对象效率相差不大, 但是动态修改字段的值效率极低!")])]),s._v(" "),t("h2",{attrs:{id:"_7-结构体声明考虑内存对齐"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-结构体声明考虑内存对齐"}},[s._v("#")]),s._v(" 7. 结构体声明考虑内存对齐")]),s._v(" "),t("ul",[t("li",[s._v("CPU 访问内存时并不是逐个字节访问，而是以字长（word size）为单位访问，例如 "),t("strong",[s._v("32位的CPU 字长是4字节")]),s._v("，"),t("strong",[s._v("64位的是8字节")]),s._v("。如果变量的地址没有对齐，可能需要多次访问才能完整读取到变量内容，而对齐后可能就只需要一次内存访问，因此内存对齐可以减少CPU访问内存的次数，加大CPU访问内存的吞吐量。")]),s._v(" "),t("li",[s._v("在实际开发中，我们可以通过调整变量位置，优化内存占用（一般按照变量内存大小顺序排列，整体占用内存更小）")])]),s._v(" "),t("h2",{attrs:{id:"_8-slice-相关"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-slice-相关"}},[s._v("#")]),s._v(" 8. slice 相关")]),s._v(" "),t("h3",{attrs:{id:"_8-1-创建slice和map声明cap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-创建slice和map声明cap"}},[s._v("#")]),s._v(" 8.1 创建slice和map声明cap")]),s._v(" "),t("ul",[t("li",[s._v("尽可能的声明容量")]),s._v(" "),t("li",[s._v("使用append向Slice追加元素时，如果Slice空间不足，将会触发Slice扩容，扩容实际上是重新分配一块更大的内存，将原Slice数据拷贝进新Slice，然后返回新Slice，扩容后再将数据追加进去。")]),s._v(" "),t("li",[s._v("扩容容量的选择遵循以下规则：\n"),t("ul",[t("li",[t("strong",[s._v("如果原Slice容量小于1024，则新Slice容量将扩大为原来的2倍；")])]),s._v(" "),t("li",[t("strong",[s._v("如果原Slice容量大于等于1024，则新Slice容量将扩大为原来的1.25倍；")])])])]),s._v(" "),t("li",[s._v("扩容消耗资源")])]),s._v(" "),t("h3",{attrs:{id:"_8-2-slice-的截取-和拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-slice-的截取-和拷贝"}},[s._v("#")]),s._v(" 8.2 slice 的截取[::]和拷贝")]),s._v(" "),t("blockquote",[t("p",[s._v("slice 使用方式不对容易造成内存的伪泄露、数据篡改等问题")])]),s._v(" "),t("blockquote",[t("p",[s._v("切片截取子切片时，会造成临时内存泄露， 主要原因有两个")]),s._v(" "),t("ol",[t("li",[s._v("切片截取时，新旧切片会共用一个底层数组")]),s._v(" "),t("li",[s._v("切片的底层结构体指向数组的指针只是一个头指针")])])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("demo")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" main\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fmt"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\ta "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\tc "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\tfmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("len")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1,9   c的数组头指针执行索引1，所以容量为9")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("解决办法")]),s._v(" "),t("ol",[t("li",[s._v("使用copy，不过要注意copy时的长度和容量问题")]),s._v(" "),t("li",[s._v("使用"),t("code",[s._v("slice [1:2:3]")]),s._v(" 两个冒号语法截取："),t("code",[s._v("[startIndex:endIndex:max]")]),s._v(", "),t("strong",[s._v("其中 max 的值一定要大于 endIndex")])])]),s._v(" "),t("ul",[t("li",[s._v("新切片的容量就是"),t("code",[s._v("max - startIndex")]),s._v(",")]),s._v(" "),t("li",[s._v("实际引用的数组时从数组"),t("code",[s._v("startIndex")]),s._v("索引开始到"),t("code",[s._v("max")]),s._v("索引为止，但不包括max索引处的元素,")]),s._v(" "),t("li",[s._v("新切片的长度就是"),t("code",[s._v("endIndex - startIndex")])])])])]),s._v(" "),t("h2",{attrs:{id:"_9-空占位符使用struct"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-空占位符使用struct"}},[s._v("#")]),s._v(" 9. 空占位符使用struct{}")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("空结构体在内存中不占用空间")])]),s._v(" "),t("li",[t("p",[s._v("用法")]),s._v(" "),t("ol",[t("li",[s._v("与map结合实现set")])]),s._v(" "),t("ul",[t("li",[s._v("Go 语言标准库没有提供 Set 的实现，通常使用 map 来代替。事实上，对于集合来说，只需要 map 的键，而不需要值。即使是将值设置为 bool 类型，也会多占据 1 个字节，那假设 map 中有一百万条数据，就会浪费 1MB 的空间")]),s._v(" "),t("li",[s._v("将 map 作为集合(Set)使用时，可以将值类型定义为空结构体，仅作为占位符使用即可。")])]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[s._v("制造伪迭代器")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("range")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  fmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"迭代器"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("不发送数据的channel")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("worker")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ch "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("chan")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<-")]),s._v("ch\n\tfmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"do something"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("close")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ch"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\tch "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("chan")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("go")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("worker")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ch"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\tch "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])])])])])]),s._v(" "),t("h2",{attrs:{id:"_10-考虑内存逃逸"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-考虑内存逃逸"}},[s._v("#")]),s._v(" 10. 考虑内存逃逸")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("控制变量不发生逃逸，将其控制在栈上，减少堆变量的分配，降低GC成本，提高程序性能。")])]),s._v(" "),t("li",[t("p",[s._v("变量逃逸一般发生在如下几种情况：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("变量较大（栈空间不足）")])]),s._v(" "),t("li",[t("p",[s._v("变量大小不确定（如slice长度或容量不定）")])]),s._v(" "),t("li",[t("p",[s._v("返回地址")])]),s._v(" "),t("li",[t("p",[s._v("返回引用（引用变量的底层是指针）")])]),s._v(" "),t("li",[t("p",[s._v("返回值类型不确定（不能确定大小）")])]),s._v(" "),t("li",[t("p",[s._v("闭包")])])])])]),s._v(" "),t("h2",{attrs:{id:"_11-返回值vs返回指针"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-返回值vs返回指针"}},[s._v("#")]),s._v(" 11. 返回值VS返回指针")]),s._v(" "),t("ul",[t("li",[s._v("值传递会拷贝整个对象，而指针传递只会拷贝地址，指向的对象是同一个。传指针可以减少值的拷贝，但是会导致内存分配逃逸到堆中，增加垃圾回收（GC）的负担。在对象频繁创建和删除的场景下，返回指针导致的GC开销可能会严重影响性能。")]),s._v(" "),t("li",[s._v("一般情况下，对于需要修改原对象，或占用内存比较大的对象，返回指针。对于只读或占用内存较小的对象，返回值能够获得更好的性能。")])]),s._v(" "),t("blockquote",[t("p",[s._v("持续完善...")])])])}),[],!1,null,null,null);t.default=e.exports}}]);