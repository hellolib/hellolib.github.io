(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{343:function(t,s,n){"use strict";n.r(s);var a=n(3),e=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),s("p",[t._v("Go 语言按类别有以下几种数据类型：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("序号")]),t._v(" "),s("th",[t._v("类型和描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[s("strong",[t._v("布尔型")]),t._v("布尔型的值只可以是常量 true 或者 false。一个简单的例子：var b bool = true。")])]),t._v(" "),s("tr",[s("td",[t._v("2")]),t._v(" "),s("td",[s("strong",[t._v("数字类型")]),t._v("整型 int 和浮点型 float32、float64，Go 语言支持整型和浮点型数字，并且支持复数，其中位的运算采用补码。")])]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",[t._v("**字符串类型:**字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本。")])]),t._v(" "),s("tr",[s("td",[t._v("4")]),t._v(" "),s("td",[s("strong",[t._v("派生类型:")]),t._v("  指针类型（Pointer） /数组类型   /结构化类型(struct)  / Channel 类型  / 函数类型   /切片类型   /接口类型（interface） /Map 类型")])])])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("字符串格式化")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/wpsCUQ8za.jpg",alt:"img"}})]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("%v")]),t._v("是万能的")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("%T")]),t._v("查看数据类型,类似"),s("code",[t._v("reflect.typeOf()")])])]),t._v(" "),s("li",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('普通占位符\n占位符 说明 举例 输出\n%v 相应值的默认格式。 Printf("%v", people) {zhangsan}，\n%+v 打印结构体时，会添加字段名 Printf("%+v", people) {Name:zhangsan}\n%#v 相应值的Go语法表示 Printf("#v", people) main.Human{Name:"zhangsan"}\n%T 相应值的类型的Go语法表示 Printf("%T", people) main.Human\n%% 字面上的百分号，并非值的占位符 Printf("%%") %\n布尔占位符\n占位符 说明 举例 输出\n%t true 或 false。 Printf("%t", true) true\n整数占位符\n占位符 说明 举例 输出\n%b 二进制表示 Printf("%b", 5) 101\n%c 相应Unicode码点所表示的字符 Printf("%c", 0x4E2D) 中\n%d 十进制表示 Printf("%d", 0x12) 18\n%o 八进制表示 Printf("%d", 10) 12\n%q 单引号围绕的字符字面值，由Go语法安全地转义 Printf("%q", 0x4E2D) \'中\'\n%x 十六进制表示，字母形式为小写 a-f Printf("%x", 13) d\n%X 十六进制表示，字母形式为大写 A-F Printf("%x", 13) D\n%U Unicode格式：U+1234，等同于 "U+%04X" Printf("%U", 0x4E2D) U+4E2D\n浮点数和复数的组成部分（实部和虚部）\n占位符 说明 举例 输出\n%b 无小数部分的，指数为二的幂的科学计数法，\n与 strconv.FormatFloat 的 \'b\' 转换格式一致。例如 -123456p-78\n%e 科学计数法，例如 -1234.456e+78 Printf("%e", 10.2) 1.020000e+01\n%E 科学计数法，例如 -1234.456E+78 Printf("%e", 10.2) 1.020000E+01\n%f 有小数点而无指数，例如 123.456 Printf("%f", 10.2) 10.200000\n%g 根据情况选择 %e 或 %f 以产生更紧凑的（无末尾的0）输出 Printf("%g", 10.20) 10.2\n%G 根据情况选择 %E 或 %f 以产生更紧凑的（无末尾的0）输出 Printf("%G", 10.20+2i) (10.2+2i)\n字符串与字节切片\n占位符 说明 举例 输出\n%s 输出字符串表示（string类型或[]byte) Printf("%s", []byte("Go语言")) Go语言\n%q 双引号围绕的字符串，由Go语法安全地转义 Printf("%q", "Go语言") "Go语言"\n%x 十六进制，小写字母，每字节两个字符 Printf("%x", "golang") 676f6c616e67\n%X 十六进制，大写字母，每字节两个字符 Printf("%X", "golang") 676F6C616E67\n指针\n占位符 说明 举例 输出\n%p 十六进制表示，前缀 0x Printf("%p", &people) 0x4f57f0\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br")])])])])])]),t._v(" "),s("h3",{attrs:{id:"字符串类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串类型"}},[t._v("#")]),t._v(" 字符串类型")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\nunsafe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n输出结果为：16\n字符串类型在 go 里是个结构, 包含指向底层数组的指针和长度,这两部分每部分都是 8 个字节，所以字符串类型大小为 16 个字节。\n*/")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("ul",[s("li",[t._v('关键字string,用""或者``反引号表示(\'""支持控制符号,反引号所有的都会原样输出)')]),t._v(" "),s("li",[t._v("占位符 '%s")]),t._v(" "),s("li",[t._v("万能占位符'%v'")])]),t._v(" "),s("h4",{attrs:{id:"字符串常用操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串常用操作"}},[t._v("#")]),t._v(" 字符串常用操作")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("长度 **len(str) ** ,返回一个int, 返回的是字节的长度, 中文的字节长3")])]),t._v(" "),s("li",[s("p",[t._v("拼接: 使用**+"),s("strong",[t._v("或者")]),t._v("fmt.Sprintf()**")])]),t._v(" "),s("li",[s("p",[t._v("分割: "),s("strong",[t._v("strings.Split(str,'分割标识')")]),t._v(", 返回一个切片")])]),t._v(" "),s("li",[s("p",[t._v("是否存在:")])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("函数|返回值")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("作用")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("strconv 包：")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("Atoi(s string) (int, error)")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("字符串转整型")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("strings 包：")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("Count(s, substr string) int")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("计算子串"),s("code",[t._v("substr")]),t._v("在字符串"),s("code",[t._v("s")]),t._v("中出现的次数")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("Compare(a, b string) int")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("比较字符串大小")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("Contains(s, substr string) bool")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("判断字符串"),s("code",[t._v("s")]),t._v("中是否包含子串"),s("code",[t._v("substr")])])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("ContainsAny(s, chars string) bool")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("判断字符串"),s("code",[t._v("s")]),t._v("中是否包含"),s("code",[t._v("chars")]),t._v("中的某个Unicode字符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("ContainsRune(s string, r rune) bool")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("判断字符串"),s("code",[t._v("s")]),t._v("中是否包含rune型值为"),s("code",[t._v("r")]),t._v("的字符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("Index(s, substr string) int")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("查找子串"),s("code",[t._v("substr")]),t._v("在字符串"),s("code",[t._v("s")]),t._v("中第一次出现的位置，如果找不到则返回 -1，如果"),s("code",[t._v("substr")]),t._v("为空，则返回 0")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("LastIndex(s, substr string) int")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("查找子串"),s("code",[t._v("substr")]),t._v("在字符串"),s("code",[t._v("s")]),t._v("中最后出现的位置")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("IndexRune(s string, r rune) int")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("查找rune型值为"),s("code",[t._v("r")]),t._v("的字符在字符串"),s("code",[t._v("s")]),t._v("中出现的起始位置")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("IndexAny(s, chars string) int")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("查找字符串"),s("code",[t._v("chars")]),t._v("中字符，在字符串"),s("code",[t._v("s")]),t._v("中出现的起始位置")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("LastIndexAny(s, chars string) int")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("查找字符串"),s("code",[t._v("s")]),t._v("中出现"),s("code",[t._v("chars")]),t._v("中字符的最后位置")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("LastIndexByte(s string, c byte) int")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("查找byte型字符"),s("code",[t._v("c")]),t._v("在字符串"),s("code",[t._v("s")]),t._v("中的位置")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("SplitN(s, sep string, n int) []string")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("以字符串"),s("code",[t._v("sep")]),t._v("为分隔符，将字符串"),s("code",[t._v("s")]),t._v("切分成"),s("code",[t._v("n")]),t._v("个子串，结果中"),s("strong",[t._v("不包含")]),s("code",[t._v("sep")]),t._v("本身。如果"),s("code",[t._v("sep")]),t._v("为空则将"),s("code",[t._v("s")]),t._v("切分为 Unicode 字符列表，如果"),s("code",[t._v("s")]),t._v("中没有"),s("code",[t._v("sep")]),t._v("子串则整个"),s("code",[t._v("s")]),t._v("作为切片 []string 中的第一个元素返回。参数"),s("code",[t._v("n")]),t._v("表示最多切出几个子串，"),s("code",[t._v("s")]),t._v("超出切分大小时，超出部分不再切分。"),s("code",[t._v("n")]),t._v("超出切分子串个数时，返回实际切分子串数。如果"),s("code",[t._v("n")]),t._v("为 0，则返回 nil；如果"),s("code",[t._v("n")]),t._v("小于 0，则不限制切分个数，全部切分")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("SplitAfterN(s, sep string, n int) []string")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("以字符串"),s("code",[t._v("sep")]),t._v("为分隔符，将字符串"),s("code",[t._v("s")]),t._v("切分成"),s("code",[t._v("n")]),t._v("个子串，结果中"),s("strong",[t._v("包含")]),s("code",[t._v("sep")]),t._v("本身。如果"),s("code",[t._v("sep")]),t._v("为空则将"),s("code",[t._v("s")]),t._v("切分为 Unicode 字符列表，如果"),s("code",[t._v("s")]),t._v("中没有"),s("code",[t._v("sep")]),t._v("子串则整个"),s("code",[t._v("s")]),t._v("作为切片 []string 中的第一个元素返回。参数"),s("code",[t._v("n")]),t._v("表示最多切出几个子串，"),s("code",[t._v("s")]),t._v("超出切分大小时，超出部分不再切分。"),s("code",[t._v("n")]),t._v("超出切分子串个数时，返回实际切分子串数。如果"),s("code",[t._v("n")]),t._v("为 0，则返回 nil；如果"),s("code",[t._v("n")]),t._v("小于 0，则不限制切分个数，全部切分")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("Split(s, sep string) []string")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("以字符串"),s("code",[t._v("sep")]),t._v("为分隔符，将"),s("code",[t._v("s")]),t._v("切分成多个子串，结果中不包含"),s("code",[t._v("sep")]),t._v("本身。如果"),s("code",[t._v("sep")]),t._v("为空，则将"),s("code",[t._v("s")]),t._v("切分成 Unicode 字符列表，如果"),s("code",[t._v("s")]),t._v("中没有"),s("code",[t._v("sep")]),t._v("子串，则将整个"),s("code",[t._v("s")]),t._v("作为 []string 的第一个元素返回")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("SplitAfter(s, sep string) []string")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("以字符串"),s("code",[t._v("sep")]),t._v("为分隔符，将"),s("code",[t._v("s")]),t._v("切分成多个子串，结果中"),s("strong",[t._v("包含")]),s("code",[t._v("sep")]),t._v("本身。如果"),s("code",[t._v("sep")]),t._v("为空则将"),s("code",[t._v("s")]),t._v("切分为 Unicode 字符列表，如果"),s("code",[t._v("s")]),t._v("中没有"),s("code",[t._v("sep")]),t._v("子串则整个"),s("code",[t._v("s")]),t._v("作为切片 []string 中的第一个元素返回。")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("Fields(s string) []string")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("以连续的空白字符为分隔符，将"),s("code",[t._v("s")]),t._v("切分成多个子串，结果中不包含空白字符本身。空白字符有：\\t, \\n, \\v, \\f, \\r, '', U+0085 (NEL), U+00A0 (NBSP) 。如果"),s("code",[t._v("s")]),t._v("中只包含空白字符，则返回一个空切片")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("FieldsFunc(s string, f func(rune) bool) []string")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("以一个或多个满足函数"),s("code",[t._v("f(rune)")]),t._v("的字符为分隔符，将"),s("code",[t._v("s")]),t._v("切分成多个子串，结果中不包含分隔符本身。如果"),s("code",[t._v("s")]),t._v("中没有满足"),s("code",[t._v("f(rune)")]),t._v("的字符，则返回一个空切片")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("Join(a []string, sep string) string")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("以"),s("code",[t._v("sep")]),t._v("为拼接符，拼接切片"),s("code",[t._v("a")]),t._v("中的字符串")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("HasPrefix(s, prefix string) bool")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("判断字符串"),s("code",[t._v("s")]),t._v("是否以"),s("code",[t._v("prefix")]),t._v("字符串开头，是返回 true，否则返回 false")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("HasSuffix(s, suffix string) bool")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("判断字符串"),s("code",[t._v("s")]),t._v("是否以"),s("code",[t._v("suffix")]),t._v("字符串结尾，是返回 true，否则返回 false")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("Map(f func(rune) rune, s string) string")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("将字符串"),s("code",[t._v("s")]),t._v("中满足函数"),s("code",[t._v("f(rune)")]),t._v("的字符替换为"),s("code",[t._v("f(rune)")]),t._v("的返回值。如果"),s("code",[t._v("f(rune)")]),t._v("返回负数，则相应的字符将被删除")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("Repeat(s string, count int) string")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("返回字符串"),s("code",[t._v("s")]),t._v("重复"),s("code",[t._v("count")]),t._v("次数后的结果")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("ToUpper(s string) string")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("将字符串"),s("code",[t._v("s")]),t._v("中的小写字符转为大写")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("ToLower(s string) string")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("将字符串"),s("code",[t._v("s")]),t._v("中的大写字符转为小写")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("ToTitle(s string) string")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("将字符串"),s("code",[t._v("s")]),t._v("中的首个单词转为"),s("code",[t._v("Title")]),t._v("形式，大部分字符的"),s("code",[t._v("Title")]),t._v("格式就是"),s("code",[t._v("Upper")]),t._v("格式")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("ToUpperSpecial(c unicode.SpecialCase, s string) string")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("将字符串"),s("code",[t._v("s")]),t._v("中的所有字符修改为其大写格式，优先使用"),s("code",[t._v("c")]),t._v("中的规则进行转换")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("ToLowerSpecial(c unicode.SpecialCase, s string) string")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("将字符串"),s("code",[t._v("s")]),t._v("中的所有字符修改为其小写格式，优先使用"),s("code",[t._v("c")]),t._v("中的规则进行转换")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("ToTitleSpecial(c unicode.SpecialCase, s string) string")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("将字符串"),s("code",[t._v("s")]),t._v("中的所有字符修改为其"),s("code",[t._v("Title")]),t._v("格式，优先使用"),s("code",[t._v("c")]),t._v("中的规则进行转换")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("Title(s string) string")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("将字符串"),s("code",[t._v("s")]),t._v("中的所有单词的首字母修改为其"),s("code",[t._v("Title")]),t._v("格式（BUG: Title 规则不能正确处理 Unicode 标点符号）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("TrimLeftFunc(s string, f func(rune) bool) string")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("删除字符串"),s("code",[t._v("s")]),t._v("左边连续满足"),s("code",[t._v("f(rune)")]),t._v("的字符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("TrimRightFunc(s string, f func(rune) bool) string")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("删除字符串"),s("code",[t._v("s")]),t._v("右边连续满足"),s("code",[t._v("f(rune)")]),t._v("的字符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("TrimFunc(s string, f func(rune) bool) string")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("删除字符串"),s("code",[t._v("s")]),t._v("左右两边连续满足"),s("code",[t._v("f(rune)")]),t._v("的字符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("IndexFunc(s string, f func(rune) bool) int")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("查找字符串"),s("code",[t._v("s")]),t._v("中第一个满足"),s("code",[t._v("f(rune)")]),t._v("的字符的字节位置，没有返回 -1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("LastIndexFunc(s string, f func(rune) bool) int")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("查找字符串"),s("code",[t._v("s")]),t._v("中最后一个满足"),s("code",[t._v("f(rune)")]),t._v("的字符的字节位置，没有返回 -1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("Trim(s string, cutset string) string")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("删除字符串"),s("code",[t._v("s")]),t._v("左右两边连续包含"),s("code",[t._v("cutset")]),t._v("的字符")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("TrimLeft(s string, cutset string) string")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("删除字符串"),s("code",[t._v("s")]),t._v("左边连续包含"),s("code",[t._v("cutset")]),t._v("的字符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("TrimRight(s string, cutset string) string")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("删除字符串"),s("code",[t._v("s")]),t._v("右边连续包含"),s("code",[t._v("cutset")]),t._v("的字符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("TrimSpace(s string) string")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("删除字符串"),s("code",[t._v("s")]),t._v("左右两边连续的空白字符")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("TrimPrefix(s, prefix string) string")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("删除字符串"),s("code",[t._v("s")]),t._v(" 头部的"),s("code",[t._v("prefix")]),t._v("字符串")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("TrimSuffix(s, suffix string) string")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("删除字符串"),s("code",[t._v("s")]),t._v(" 尾部的"),s("code",[t._v("suffix")]),t._v("字符串")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("Replace(s, old, new string, n int) string")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("替换字符串"),s("code",[t._v("s")]),t._v("中的"),s("code",[t._v("old")]),t._v("为"),s("code",[t._v("new")]),t._v("，如果"),s("code",[t._v("old")]),t._v("为空则在"),s("code",[t._v("s")]),t._v("中的每个字符间插入"),s("code",[t._v("new")]),t._v("包括首尾，"),s("code",[t._v("n")]),t._v("为替换次数， -1 时替换所有")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("EqualFold(s, t string) bool")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("忽略大小写比较字符串"),s("code",[t._v("s")]),t._v("和"),s("code",[t._v("t")]),t._v("，相同返回 true，反之返回 false")])])])])]),t._v(" "),s("p",[s("strong",[t._v("1. 字符串转数字")])]),t._v(" "),s("ul",[s("li",[t._v("strconv.Atoi：")])]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"strconv"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"111"')]),t._v("\n    i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" strconv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Atoi")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出：111")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br")])]),s("p",[s("strong",[t._v("2. 大小写规则转换")]),t._v("\nstrings.ToUpperSpecial：将字符串"),s("code",[t._v("s")]),t._v("中的所有字符修改为其大写格式，优先使用"),s("code",[t._v("c")]),t._v("中的规则进行转换\nstrings.ToLowerSpecial：将字符串"),s("code",[t._v("s")]),t._v("中的所有字符修改为其小写格式，优先使用"),s("code",[t._v("c")]),t._v("中的规则进行转换\nstrings.ToTitleSpecial：将字符串"),s("code",[t._v("s")]),t._v("中的所有字符修改为其"),s("code",[t._v("Title")]),t._v("格式，优先使用"),s("code",[t._v("c")]),t._v("中的规则进行转换\n"),s("code",[t._v("c")]),t._v("规则说明，以下列语句为例：\nunicode.CaseRange{'A', 'Z', [unicode.MaxCase]rune{3, -3, 0}}")]),t._v(" "),s("ul",[s("li",[t._v("其中 'A', 'Z' 表示此规则只影响 'A' 到 'Z' 之间的字符。")]),t._v(" "),s("li",[t._v("其中"),s("code",[t._v("[unicode.MaxCase]rune")]),t._v("数组表示：")]),t._v(" "),s("li",[t._v("当使用 ToUpperSpecial 转换时，将字符的 Unicode 编码与第一个元素值（3）相加")]),t._v(" "),s("li",[t._v("当使用 ToLowerSpecial 转换时，将字符的 Unicode 编码与第二个元素值（-3）相加")]),t._v(" "),s("li",[t._v("当使用 ToTitleSpecial 转换时，将字符的 Unicode 编码与第三个元素值（0）相加")])]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"strings"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unicode"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义转换规则")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" _MyCase "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" unicode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SpecialCase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将半角逗号替换为全角逗号，ToTitle 不处理")]),t._v("\n        unicode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CaseRange"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("','")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("','")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("unicode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MaxCase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("rune")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'，'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("','")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'，'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("','")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将半角句号替换为全角句号，ToTitle 不处理")]),t._v("\n        unicode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CaseRange"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'.'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'.'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("unicode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MaxCase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("rune")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'。'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'.'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'。'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'.'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 ABC 分别替换为全角的 ＡＢＣ、ａｂｃ，ToTitle 不处理")]),t._v("\n        unicode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CaseRange"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'A'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'C'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("unicode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MaxCase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("rune")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'Ａ'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'A'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'ａ'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'A'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ABCDEF,abcdef."')]),t._v("\n    us "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" strings"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ToUpperSpecial")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_MyCase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%q\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" us"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 输出："ＡＢＣDEF，ABCDEF。"')]),t._v("\n    ls "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" strings"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ToLowerSpecial")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_MyCase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%q\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ls"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 输出："ａｂｃdef，abcdef。"')]),t._v("\n    ts "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" strings"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ToTitleSpecial")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_MyCase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%q\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ts"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 输出："ABCDEF,ABCDEF."')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br")])]),s("h3",{attrs:{id:"字符串原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串原理"}},[t._v("#")]),t._v(" 字符串原理")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("单引号是字符,双引号是字符串")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("字符串的底层就是一个byte数组,所以可以和 []byte 类型互相转换")])])]),t._v(" "),s("li",[s("p",[t._v("字符串是由byte字节组成的,所以字符串的长度是byte字节的长度")])]),t._v(" "),s("li",[s("p",[t._v("rune类型用来表示utf8字符,一个rune字符由1个或多个byte组成")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("对包含中文的字符串排序")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tstr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ABCDEFGH你好"')]),t._v("\n\tstrRune "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rune")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strRune"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\titem "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" strRune"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t\tstrRune"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" strRune"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strRune"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t\tstrRune"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strRune"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 14")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strRune"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  [22909 20320 72 71 70 69 68 67 66 65]")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strRune"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//好你HGFEDCBA")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br")])])])])]),t._v(" "),s("li",[s("p",[t._v("扩展")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1、位：")]),t._v("\n数据存储的最小单位。每个二进制数字"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("或者"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("就是"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("个位；\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2、字节：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("个位构成一个字节；即："),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("字节"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("位"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("；\n     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" KB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("B")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("字节"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("；\n     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" MB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),t._v(" KB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" B"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" GB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),t._v(" MB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v(" B"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" TB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),t._v(" GB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v(" B"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3、字符：")]),t._v("\n     a、A、中、"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("、"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("、の"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("均表示一个字符；\n\t\t unicode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("万国码"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),t._v("位既"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("个字节表示一个字符"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     一般 utf"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" 编码下，一个汉字 字符 占用 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" 个 字节；\n     一般 gbk 编码下，一个汉字  字符  占用 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" 个 字节；\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//4、字节和字符：")]),t._v("\n字节是计算机传输数据的格式，供计算识别的。\n字符是供人类观看的内容\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//5、编码：")]),t._v("\n编码（encoding）"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("把…译成密码。"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("》二进制\n解码（decoding）：破译"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("尤指密码"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("》破解密码成可以看的懂的\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//6.编码格式：")]),t._v("\n字节和字符之间转换，参照的规则就是编码格式。\nUnicode 编码共有三种具体实现，分别为utf"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("utf"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("utf"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),t._v("，其中utf"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("占用一到四个字节，utf"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v("占用二或四个字节，utf"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),t._v("占用四个字节。\nUnicode码的前"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),t._v("个字符就是ASCII码，之后是ASCII码的扩展码。\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br")])])])]),t._v(" "),s("h3",{attrs:{id:"数字类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数字类型"}},[t._v("#")]),t._v(" 数字类型")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Go 也有基于架构的类型，例如：int、uint 和 uintptr。")])]),t._v(" "),s("li",[s("p",[t._v("所有整数初始化为0,所有浮点数初始化为0.0,布尔类型初始化为 false")])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("序号")]),t._v(" "),s("th",[t._v("类型和描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[s("strong",[t._v("uint8")]),t._v("无符号 8 位整型 (0 到 255)")])]),t._v(" "),s("tr",[s("td",[t._v("2")]),t._v(" "),s("td",[s("strong",[t._v("uint16")]),t._v("无符号 16 位整型 (0 到 65535)")])]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",[s("strong",[t._v("uint32")]),t._v("无符号 32 位整型 (0 到 4294967295)")])]),t._v(" "),s("tr",[s("td",[t._v("4")]),t._v(" "),s("td",[s("strong",[t._v("uint64")]),t._v("无符号 64 位整型 (0 到 18446744073709551615)")])]),t._v(" "),s("tr",[s("td",[t._v("5")]),t._v(" "),s("td",[s("strong",[t._v("int8")]),t._v("有符号 8 位整型 (-128 到 127)")])]),t._v(" "),s("tr",[s("td",[t._v("6")]),t._v(" "),s("td",[s("strong",[t._v("int16")]),t._v("有符号 16 位整型 (-32768 到 32767)")])]),t._v(" "),s("tr",[s("td",[t._v("7")]),t._v(" "),s("td",[s("strong",[t._v("int32")]),t._v("有符号 32 位整型 (-2147483648 到 2147483647)")])]),t._v(" "),s("tr",[s("td",[t._v("8")]),t._v(" "),s("td",[s("strong",[t._v("int64")]),t._v("有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)")])])])]),t._v(" "),s("h4",{attrs:{id:"浮点型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浮点型"}},[t._v("#")]),t._v(" "),s("strong",[t._v("浮点型")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("序号")]),t._v(" "),s("th",[t._v("类型和描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[s("strong",[t._v("float32")]),t._v("IEEE-754 32位浮点型数")])]),t._v(" "),s("tr",[s("td",[t._v("2")]),t._v(" "),s("td",[s("strong",[t._v("float64")]),t._v("IEEE-754 64位浮点型数")])]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",[s("strong",[t._v("complex64")]),t._v("32 位实数和虚数")])]),t._v(" "),s("tr",[s("td",[t._v("4")]),t._v(" "),s("td",[s("strong",[t._v("complex128")]),t._v("64 位实数和虚数")])])])]),t._v(" "),s("hr"),t._v(" "),s("h4",{attrs:{id:"其他数字类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他数字类型"}},[t._v("#")]),t._v(" 其他数字类型")]),t._v(" "),s("p",[t._v("以下列出了其他更多的数字类型：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("序号")]),t._v(" "),s("th",[t._v("类型和描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[s("strong",[t._v("byte")]),t._v("类似 uint8")])]),t._v(" "),s("tr",[s("td",[t._v("2")]),t._v(" "),s("td",[s("strong",[t._v("rune")]),t._v("类似 int32")])]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",[s("strong",[t._v("uint")]),t._v("32 或 64 位")])]),t._v(" "),s("tr",[s("td",[t._v("4")]),t._v(" "),s("td",[s("strong",[t._v("int")]),t._v("与 uint 一样大小")])]),t._v(" "),s("tr",[s("td",[t._v("5")]),t._v(" "),s("td",[s("strong",[t._v("uintptr")]),t._v("无符号整型，用于存放一个指针")])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);