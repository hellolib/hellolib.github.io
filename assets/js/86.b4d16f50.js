(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{407:function(a,n,s){"use strict";s.r(n);var e=s(3),t=Object(e.a)({},(function(){var a=this,n=a._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("blockquote",[n("p",[a._v("sync.map 并发安全")])]),a._v(" "),n("h2",{attrs:{id:"简单介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简单介绍"}},[a._v("#")]),a._v(" 简单介绍")]),a._v(" "),n("ul",[n("li",[n("p",[a._v("Go 语言原生 map 并不是线程安全的，对它进行并发读写操作的时候，需要加锁。而 "),n("code",[a._v("sync.map")]),a._v(" 则是一种并发安全的 map，在 Go 1.9 引入。")]),a._v(" "),n("blockquote",[n("p",[n("code",[a._v("sync.map")]),a._v(" 是线程安全的，读取，插入，删除也都保持着常数级的时间复杂度。\n"),n("code",[a._v("sync.map")]),a._v(" 的零值是有效的，并且零值是一个空的 map。在第一次使用之后，不允许被拷贝。")])])]),a._v(" "),n("li",[n("p",[a._v("一般情况下解决并发读写 map 的思路是加一把大锁，或者把一个 map 分成若干个小 map，对 key 进行哈希，只操作相应的小 map。前者锁的粒度比较大，影响效率；后者实现起来比较复杂，容易出错。")])]),a._v(" "),n("li",[n("p",[a._v("而使用 "),n("code",[a._v("sync.map")]),a._v(" 之后，对 map 的读写，不需要加锁。并且它通过空间换时间的方式，使用 read 和 dirty 两个 map 来进行读写分离，降低锁时间来提高效率。")])]),a._v(" "),n("li",[n("p",[a._v("使用非常简单，和普通 map 相比，仅遍历的方式略有区别：")]),a._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("package")]),a._v(" main\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("\n\t"),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"fmt"')]),a._v("\n\t"),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"sync"')]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("func")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" m sync"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Map\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 1. 写入")]),a._v("\n\tm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("Store")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"qcrao"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("18")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\tm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("Store")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"stefno"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("20")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 2. 读取")]),a._v("\n\tage"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("_")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" m"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("Load")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"qcrao"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("age"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 3. 遍历")]),a._v("\n\tm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("Range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" value "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("interface")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("bool")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t\tname "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\t\tage "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\t\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" age"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 4. 删除")]),a._v("\n\tm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("Delete")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"qcrao"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\tage"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ok "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v(" m"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("Load")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"qcrao"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("age"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ok"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 5. 读取或写入")]),a._v("\n\tm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("LoadOrStore")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"stefno"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\tage"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("_")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" m"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("Load")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"stefno"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("age"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br"),n("span",{staticClass:"line-number"},[a._v("23")]),n("br"),n("span",{staticClass:"line-number"},[a._v("24")]),n("br"),n("span",{staticClass:"line-number"},[a._v("25")]),n("br"),n("span",{staticClass:"line-number"},[a._v("26")]),n("br"),n("span",{staticClass:"line-number"},[a._v("27")]),n("br"),n("span",{staticClass:"line-number"},[a._v("28")]),n("br"),n("span",{staticClass:"line-number"},[a._v("29")]),n("br"),n("span",{staticClass:"line-number"},[a._v("30")]),n("br"),n("span",{staticClass:"line-number"},[a._v("31")]),n("br"),n("span",{staticClass:"line-number"},[a._v("32")]),n("br"),n("span",{staticClass:"line-number"},[a._v("33")]),n("br"),n("span",{staticClass:"line-number"},[a._v("34")]),n("br"),n("span",{staticClass:"line-number"},[a._v("35")]),n("br")])]),n("p",[a._v("第 1 步，写入两个 k-v 对；")]),a._v(" "),n("p",[a._v("第 2 步，使用 Load 方法读取其中的一个 key；")]),a._v(" "),n("p",[a._v("第 3 步，遍历所有的 k-v 对，并打印出来；")]),a._v(" "),n("p",[a._v("第 4 步，删除其中的一个 key，再读这个 key，得到的就是 nil；")]),a._v(" "),n("p",[a._v('第 5 步，使用 LoadOrStore，尝试读取或写入 "Stefno"，因为这个 key 已经存在，因此写入不成功，并且读出原值。')]),a._v(" "),n("blockquote",[n("p",[a._v("程序输出:")]),a._v(" "),n("p",[a._v("18\nstefno 20\nqcrao 18\n"),n("nil",[a._v(" false\n20")])],1)])]),a._v(" "),n("li",[n("p",[n("code",[a._v("sync.map")]),a._v(" 适用于读多写少的场景。对于写多的场景，会导致 read map 缓存失效，需要加锁，导致冲突变多；而且由于未命中 read map 次数过多，导致 dirty map 提升为 read map，这是一个 O(N) 的操作，会进一步降低性能。")])])]),a._v(" "),n("h2",{attrs:{id:"源码分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#源码分析"}},[a._v("#")]),a._v(" 源码分析")]),a._v(" "),n("h3",{attrs:{id:"_1-数据结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据结构"}},[a._v("#")]),a._v(" 1. 数据结构")]),a._v(" "),n("ul",[n("li",[n("p",[a._v("先来看下 map 的数据结构。去掉大段的注释后：")]),a._v(" "),n("div",{staticClass:"language-golang line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("type Map struct {\n  mu Mutex\n  read atomic.Value // readOnly\n  dirty map[interface{}]*entry\n  misses int\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br")])])]),a._v(" "),n("li",[n("p",[a._v("互斥量 "),n("code",[a._v("mu")]),a._v(" 保护 read 和 dirty。")])]),a._v(" "),n("li",[n("p",[n("code",[a._v("read")]),a._v(" 是 atomic.Value 类型，可以并发地读。但如果需要更新 "),n("code",[a._v("read")]),a._v("，则需要加锁保护。对于 read 中存储的 entry 字段，可能会被并发地 CAS 更新。但是如果要更新一个之前已被删除的 entry，则需要先将其状态从 expunged 改为 nil，再拷贝到 dirty 中，然后再更新。")])]),a._v(" "),n("li",[n("p",[n("code",[a._v("dirty")]),a._v(" 是一个非线程安全的原始 map。包含新写入的 key，并且包含 "),n("code",[a._v("read")]),a._v(" 中的所有未被删除的 key。这样，可以快速地将 "),n("code",[a._v("dirty")]),a._v(" 提升为 "),n("code",[a._v("read")]),a._v(" 对外提供服务。如果 "),n("code",[a._v("dirty")]),a._v(" 为 nil，那么下一次写入时，会新建一个新的 "),n("code",[a._v("dirty")]),a._v("，这个初始的 "),n("code",[a._v("dirty")]),a._v(" 是 "),n("code",[a._v("read")]),a._v(" 的一个拷贝，但除掉了其中已被删除的 key。")])]),a._v(" "),n("li",[n("p",[a._v("每当从 read 中读取失败，都会将 "),n("code",[a._v("misses")]),a._v(" 的计数值加 1，当加到一定阈值以后，需要将 dirty 提升为 read，以期减少 miss 的情形。")]),a._v(" "),n("blockquote",[n("p",[n("code",[a._v("read map")]),a._v(" 和 "),n("code",[a._v("dirty map")]),a._v(" 的存储方式是不一致的。\n前者使用 atomic.Value，后者只是单纯的使用 map。\n原因是 read map 使用 lock free 操作，必须保证 load/store 的原子性；而 dirty map 的 load+store 操作是由 lock（就是 mu）来保护的。")])])]),a._v(" "),n("li",[n("p",[a._v("真正存储 "),n("code",[a._v("key/value")]),a._v(" 的是 read 和 dirty 字段。"),n("code",[a._v("read")]),a._v(" 使用 atomic.Value，这是 lock-free 的基础，保证 load/store 的原子性。"),n("code",[a._v("dirty")]),a._v(" 则直接用了一个原始的 map，对于它的 load/store 操作需要加锁。")])]),a._v(" "),n("li",[n("p",[n("code",[a._v("read")]),a._v(" 字段里实际上是存储的是：")]),a._v(" "),n("div",{staticClass:"language-golang line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("// readOnly is an immutable struct stored atomically in the Map.read field.\ntype readOnly struct {\n  m       map[interface{}]*entry\n  amended bool // true if the dirty map contains some key not in m.\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br")])])]),a._v(" "),n("li",[n("p",[a._v("注意到 read 和 dirty 里存储的东西都包含 "),n("code",[a._v("entry")]),a._v("，来看一下：")]),a._v(" "),n("div",{staticClass:"language-golang line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("type entry struct {\n  p unsafe.Pointer // *interface{}\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br")])])]),a._v(" "),n("li",[n("p",[a._v("很简单，它是一个指针，指向 value。看来，read 和 dirty 各自维护一套 key，key 指向的都是同一个 value。也就是说，只要修改了这个 entry，对 read 和 dirty 都是可见的。这个指针的状态有三种：")]),a._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20220617163050.png",alt:"image-20220617163050406"}})]),a._v(" "),n("li",[n("p",[a._v("当 "),n("code",[a._v("p == nil")]),a._v(" 时，说明这个键值对已被删除，并且 m.dirty == nil，或 m.dirty[k] 指向该 entry。")])]),a._v(" "),n("li",[n("p",[a._v("当 "),n("code",[a._v("p == expunged")]),a._v(" 时，说明这条键值对已被删除，并且 m.dirty != nil，且 m.dirty 中没有这个 key。")])]),a._v(" "),n("li",[n("p",[a._v("其他情况，p 指向一个正常的值，表示实际 "),n("code",[a._v("interface{}")]),a._v(" 的地址，并且被记录在 m.read.m[key] 中。如果这时 m.dirty 不为 nil，那么它也被记录在 m.dirty[key] 中。两者实际上指向的是同一个值。")])]),a._v(" "),n("li",[n("p",[a._v("当删除 key 时，并不实际删除。一个 entry 可以通过原子地（CAS 操作）设置 p 为 nil 被删除。如果之后创建 m.dirty，nil 又会被原子地设置为 expunged，且不会拷贝到 dirty 中。")])]),a._v(" "),n("li",[n("p",[a._v("如果 p 不为 expunged，和 entry 相关联的这个 value 可以被原子地更新；如果 "),n("code",[a._v("p == expunged")]),a._v("，那么仅当它初次被设置到 m.dirty 之后，才可以被更新。")])]),a._v(" "),n("li",[n("p",[a._v("整体用一张图来表示：")]),a._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20220617163412.png",alt:"image-20220617163412675"}})])])]),a._v(" "),n("h3",{attrs:{id:"_2-store"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-store"}},[a._v("#")]),a._v(" 2. Store")]),a._v(" "),n("ul",[n("li",[n("p",[a._v("先来看 expunged：")]),a._v(" "),n("div",{staticClass:"language-golang line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var expunged = unsafe.Pointer(new(interface{}))\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br")])])]),a._v(" "),n("li",[n("p",[a._v("它是一个指向任意类型的指针，用来标记从 dirty map 中删除的 entry。")]),a._v(" "),n("div",{staticClass:"language-golang line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("// Store sets the value for a key.\nfunc (m *Map) Store(key, value interface{}) {\n  // 如果 read map 中存在该 key  则尝试直接更改(由于修改的是 entry 内部的 pointer，因此 dirty map 也可见)\n  read, _ := m.read.Load().(readOnly)\n  if e, ok := read.m[key]; ok && e.tryStore(&value) {\n    return\n  }\n\n  m.mu.Lock()\n  read, _ = m.read.Load().(readOnly)\n  if e, ok := read.m[key]; ok {\n    if e.unexpungeLocked() {\n      // 如果 read map 中存在该 key，但 p == expunged，则说明 m.dirty != nil 并且 m.dirty 中不存在该 key 值 此时:\n      //    a. 将 p 的状态由 expunged  更改为 nil\n      //    b. dirty map 插入 key\n          m.dirty[key] = e\n    }\n    // 更新 entry.p = value (read map 和 dirty map 指向同一个 entry)\n    e.storeLocked(&value)\n  } else if e, ok := m.dirty[key]; ok {\n    // 如果 read map 中不存在该 key，但 dirty map 中存在该 key，直接写入更新 entry(read map 中仍然没有这个 key)\n    e.storeLocked(&value)\n  } else {\n    // 如果 read map 和 dirty map 中都不存在该 key，则：\n    //\t  a. 如果 dirty map 为空，则需要创建 dirty map，并从 read map 中拷贝未删除的元素到新创建的 dirty map\n    //    b. 更新 amended 字段，标识 dirty map 中存在 read map 中没有的 key\n    //    c. 将 kv 写入 dirty map 中，read 不变\n    if !read.amended {\n        // 到这里就意味着，当前的 key 是第一次被加到 dirty map 中。\n      // store 之前先判断一下 dirty map 是否为空，如果为空，就把 read map 浅拷贝一次。\n      m.dirtyLocked()\n      m.read.Store(readOnly{m: read.m, amended: true})\n    }\n    // 写入新 key，在 dirty 中存储 value\n    m.dirty[key] = newEntry(value)\n  }\n  m.mu.Unlock()\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br"),n("span",{staticClass:"line-number"},[a._v("23")]),n("br"),n("span",{staticClass:"line-number"},[a._v("24")]),n("br"),n("span",{staticClass:"line-number"},[a._v("25")]),n("br"),n("span",{staticClass:"line-number"},[a._v("26")]),n("br"),n("span",{staticClass:"line-number"},[a._v("27")]),n("br"),n("span",{staticClass:"line-number"},[a._v("28")]),n("br"),n("span",{staticClass:"line-number"},[a._v("29")]),n("br"),n("span",{staticClass:"line-number"},[a._v("30")]),n("br"),n("span",{staticClass:"line-number"},[a._v("31")]),n("br"),n("span",{staticClass:"line-number"},[a._v("32")]),n("br"),n("span",{staticClass:"line-number"},[a._v("33")]),n("br"),n("span",{staticClass:"line-number"},[a._v("34")]),n("br"),n("span",{staticClass:"line-number"},[a._v("35")]),n("br"),n("span",{staticClass:"line-number"},[a._v("36")]),n("br"),n("span",{staticClass:"line-number"},[a._v("37")]),n("br"),n("span",{staticClass:"line-number"},[a._v("38")]),n("br")])])]),a._v(" "),n("li",[n("p",[a._v("整体流程：")]),a._v(" "),n("ol",[n("li",[a._v("如果在 read 里能够找到待存储的 key，并且对应的 entry 的 p 值不为 expunged，也就是没被删除时，直接更新对应的 entry 即可。")]),a._v(" "),n("li",[a._v("第一步没有成功：要么 read 中没有这个 key，要么 key 被标记为删除。则先加锁，再进行后续的操作。")]),a._v(" "),n("li",[a._v("再次在 read 中查找是否存在这个 key，也就是 double check 一下，这也是 lock-free 编程里的常见套路。如果 read 中存在该 key，但 "),n("code",[a._v("p == expunged")]),a._v("，说明 m.dirty != nil 并且 m.dirty 中不存在该 key 值 此时: a. 将 p 的状态由 expunged 更改为 nil；b. dirty map 插入 key。然后，直接更新对应的 value。")]),a._v(" "),n("li",[a._v("如果 read 中没有此 key，那就查看 dirty 中是否有此 key，如果有，则直接更新对应的 value，这时 read 中还是没有此 key。")]),a._v(" "),n("li",[a._v("最后一步，如果 read 和 dirty 中都不存在该 key，则：a. 如果 dirty 为空，则需要创建 dirty，并从 read 中拷贝未被删除的元素；b. 更新 amended 字段，标识 dirty map 中存在 read map 中没有的 key；c. 将 k-v 写入 dirty map 中，read.m 不变。最后，更新此 key 对应的 value。")])])]),a._v(" "),n("li",[n("p",[a._v("再来看一些子函数：")]),a._v(" "),n("div",{staticClass:"language-golang line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("// 如果 entry 没被删，tryStore 存储值到 entry 中。如果 p == expunged，即 entry 被删，那么返回 false。\nfunc (e *entry) tryStore(i *interface{}) bool {\n  for {\n    p := atomic.LoadPointer(&e.p)\n    if p == expunged {\n      return false\n    }\n    if atomic.CompareAndSwapPointer(&e.p, p, unsafe.Pointer(i)) {\n      return true\n    }\n  }\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br")])])]),a._v(" "),n("li",[n("p",[n("code",[a._v("tryStore")]),a._v(" 在 Store 函数最开始的时候就会调用，是比较常见的 "),n("code",[a._v("for")]),a._v(" 循环加 CAS 操作，尝试更新 entry，让 p 指向新的值。")])]),a._v(" "),n("li",[n("p",[n("code",[a._v("unexpungeLocked")]),a._v(" 函数确保了 entry 没有被标记成已被清除：")]),a._v(" "),n("div",{staticClass:"language-golang line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("// unexpungeLocked 函数确保了 entry 没有被标记成已被清除。\n// 如果 entry 先前被清除过了，那么在 mutex 解锁之前，它一定要被加入到 dirty map 中\nfunc (e *entry) unexpungeLocked() (wasExpunged bool) {\n  return atomic.CompareAndSwapPointer(&e.p, expunged, nil)\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br")])])])]),a._v(" "),n("h3",{attrs:{id:"_3-load"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-load"}},[a._v("#")]),a._v(" 3. Load")]),a._v(" "),n("div",{staticClass:"language-golang line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('    func (m *Map) Load(key interface{}) (value interface{}, ok bool) {\n      read, _ := m.read.Load().(readOnly)\n      e, ok := read.m[key]\n      // 如果没在 read 中找到，并且 amended 为 true，即 dirty 中存在 read 中没有的 key\n      if !ok && read.amended {\n        m.mu.Lock() // dirty map 不是线程安全的，所以需要加上互斥锁\n        // double check。避免在上锁的过程中 dirty map 提升为 read map。\n        read, _ = m.read.Load().(readOnly)\n        e, ok = read.m[key]\n        // 仍然没有在 read 中找到这个 key，并且 amended 为 true\n        if !ok && read.amended {\n          e, ok = m.dirty[key] // 从 dirty 中找\n          // 不管 dirty 中有没有找到，都要"记一笔"，因为在 dirty 提升为 read 之前，都会进入这条路径\n          m.missLocked()\n        }\n        m.mu.Unlock()\n      }\n      if !ok { // 如果没找到，返回空，false\n        return nil, false\n      }\n      return e.load()\n    }\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br")])]),n("ul",[n("li",[n("p",[a._v("处理路径分为 fast path 和 slow path，整体流程如下：")]),a._v(" "),n("ol",[n("li",[a._v("首先是 fast path，直接在 read 中找，如果找到了直接调用 entry 的 load 方法，取出其中的值。")]),a._v(" "),n("li",[a._v("如果 read 中没有这个 key，且 amended 为 fase，说明 dirty 为空，那直接返回 空和 false。")]),a._v(" "),n("li",[a._v('如果 read 中没有这个 key，且 amended 为 true，说明 dirty 中可能存在我们要找的 key。当然要先上锁，再尝试去 dirty 中查找。在这之前，仍然有一个 double check 的操作。若还是没有在 read 中找到，那么就从 dirty 中找。不管 dirty 中有没有找到，都要"记一笔"，因为在 dirty 被提升为 read 之前，都会进入这条路径')])])]),a._v(" "),n("li",[n("p",[a._v("这里主要看下 "),n("code",[a._v("missLocked")]),a._v(" 的函数的实现：")]),a._v(" "),n("div",{staticClass:"language-golang line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("func (m *Map) missLocked() {\n  m.misses++\n  if m.misses < len(m.dirty) {\n    return\n  }\n  // dirty map 晋升\n  m.read.Store(readOnly{m: m.dirty})\n  m.dirty = nil\n  m.misses = 0\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br")])])]),a._v(" "),n("li",[n("p",[a._v("直接将 misses 的值加 1，表示一次未命中，如果 misses 值小于 m.dirty 的长度，就直接返回。否则，将 m.dirty 晋升为 read，并清空 dirty，清空 misses 计数值。这样，之前一段时间新加入的 key 都会进入到 read 中，从而能够提升 read 的命中率。")])]),a._v(" "),n("li",[n("p",[a._v("再来看下 entry 的 load 方法：")]),a._v(" "),n("div",{staticClass:"language-golang line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("func (e *entry) load() (value interface{}, ok bool) {\n  p := atomic.LoadPointer(&e.p)\n  if p == nil || p == expunged {\n    return nil, false\n  }\n  return *(*interface{})(p), true\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br")])])]),a._v(" "),n("li",[n("p",[a._v("对于 nil 和 expunged 状态的 entry，直接返回 "),n("code",[a._v("ok=false")]),a._v("；否则，将 p 转成 "),n("code",[a._v("interface{}")]),a._v(" 返回。")])])]),a._v(" "),n("h3",{attrs:{id:"_4-delete"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-delete"}},[a._v("#")]),a._v(" 4. Delete")]),a._v(" "),n("div",{staticClass:"language-golang line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("// Delete deletes the value for a key.\nfunc (m *Map) Delete(key interface{}) {\n  read, _ := m.read.Load().(readOnly)\n  e, ok := read.m[key]\n  // 如果 read 中没有这个 key，且 dirty map 不为空\n  if !ok && read.amended {\n    m.mu.Lock()\n    read, _ = m.read.Load().(readOnly)\n    e, ok = read.m[key]\n    if !ok && read.amended {\n      delete(m.dirty, key) // 直接从 dirty 中删除这个 key\n    }\n    m.mu.Unlock()\n  }\n  if ok {\n    e.delete() // 如果在 read 中找到了这个 key，将 p 置为 nil\n  }\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br")])]),n("ul",[n("li",[n("p",[a._v("可以看到，基本套路还是和 Load，Store 类似，都是先从 read 里查是否有这个 key，如果有则执行 "),n("code",[a._v("entry.delete")]),a._v(" 方法，将 p 置为 nil，这样 read 和 dirty 都能看到这个变化。")])]),a._v(" "),n("li",[n("p",[a._v("如果没在 read 中找到这个 key，并且 dirty 不为空，那么就要操作 dirty 了，操作之前，还是要先上锁。然后进行 double check，如果仍然没有在 read 里找到此 key，则从 dirty 中删掉这个 key。但不是真正地从 dirty 中删除，而是更新 entry 的状态。")])]),a._v(" "),n("li",[n("p",[a._v("来看下 "),n("code",[a._v("entry.delete")]),a._v(" 方法：")]),a._v(" "),n("div",{staticClass:"language-golang line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("func (e *entry) delete() (hadValue bool) {\n  for {\n    p := atomic.LoadPointer(&e.p)\n    if p == nil || p == expunged {\n      return false\n    }\n    if atomic.CompareAndSwapPointer(&e.p, p, nil) {\n      return true\n    }\n  }\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br")])])]),a._v(" "),n("li",[n("p",[a._v("它真正做的事情是将正常状态（指向一个 interface{}）的 p 设置成 nil。没有设置成 expunged 的原因是，当 p 为 expunged 时，表示它已经不在 dirty 中了。这是 p 的状态机决定的，在 "),n("code",[a._v("tryExpungeLocked")]),a._v(" 函数中，会将 nil 原子地设置成 expunged。")])]),a._v(" "),n("li",[n("p",[n("code",[a._v("tryExpungeLocked")]),a._v(" 是在新创建 dirty 时调用的，会将已被删除的 entry.p 从 nil 改成 expunged，这个 entry 就不会写入 dirty 了。")]),a._v(" "),n("div",{staticClass:"language-golang line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("func (e *entry) tryExpungeLocked() (isExpunged bool) {\n  p := atomic.LoadPointer(&e.p)\n  for p == nil {\n    // 如果原来是 nil，说明原 key 已被删除，则将其转为 expunged。\n    if atomic.CompareAndSwapPointer(&e.p, nil, expunged) {\n      return true\n    }\n    p = atomic.LoadPointer(&e.p)\n  }\n  return p == expunged\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br")])])]),a._v(" "),n("li",[n("p",[a._v("注意到如果 key 同时存在于 read 和 dirty 中时，删除只是做了一个标记，将 p 置为 nil；而如果仅在 dirty 中含有这个 key 时，会直接删除这个 key。原因在于，若两者都存在这个 key，仅做标记删除，可以在下次查找这个 key 时，命中 read，提升效率。若只有在 dirty 中存在时，read 起不到“缓存”的作用，直接删除。")])])]),a._v(" "),n("h3",{attrs:{id:"_5-loadorstore"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-loadorstore"}},[a._v("#")]),a._v(" 5. LoadOrStore")]),a._v(" "),n("p",[a._v("这个函数结合了 Load 和 Store 的功能，如果 map 中存在这个 key，那么返回这个 key 对应的 value；否则，将 key-value 存入 map。这在需要先执行 Load 查看某个 key 是否存在，之后再更新此 key 对应的 value 时很有效，因为 LoadOrStore 可以并发执行。")]),a._v(" "),n("p",[a._v("具体的过程不再一一分析了，可参考 Load 和 Store 的源码分析。")]),a._v(" "),n("h3",{attrs:{id:"_6-range"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-range"}},[a._v("#")]),a._v(" 6. Range")]),a._v(" "),n("ul",[n("li",[n("p",[a._v("Range 的参数是一个函数：")]),a._v(" "),n("div",{staticClass:"language-golang line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("f func(key, value interface{}) bool\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br")])])]),a._v(" "),n("li",[n("p",[a._v("由使用者提供实现，Range 将遍历调用时刻 map 中的所有 k-v 对，将它们传给 f 函数，如果 f 返回 false，将停止遍历。")]),a._v(" "),n("div",{staticClass:"language-golang line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("func (m *Map) Range(f func(key, value interface{}) bool) {\n  read, _ := m.read.Load().(readOnly)\n  if read.amended {\n    m.mu.Lock()\n    read, _ = m.read.Load().(readOnly)\n    if read.amended {\n      read = readOnly{m: m.dirty}\n      m.read.Store(read)\n      m.dirty = nil\n      m.misses = 0\n    }\n    m.mu.Unlock()\n  }\n\n  for k, e := range read.m {\n    v, ok := e.load()\n    if !ok {\n      continue\n    }\n    if !f(k, v) {\n      break\n    }\n  }\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br"),n("span",{staticClass:"line-number"},[a._v("23")]),n("br"),n("span",{staticClass:"line-number"},[a._v("24")]),n("br")])])]),a._v(" "),n("li",[n("p",[a._v("当 amended 为 true 时，说明 dirty 中含有 read 中没有的 key，因为 Range 会遍历所有的 key，是一个 O(n) 操作。将 dirty 提升为 read，会将开销分摊开来，所以这里直接就提升了。")])]),a._v(" "),n("li",[n("p",[a._v("之后，遍历 read，取出 entry 中的值，调用 f(k, v)。")])])]),a._v(" "),n("h2",{attrs:{id:"其他"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[a._v("#")]),a._v(" 其他")]),a._v(" "),n("ul",[n("li",[n("p",[a._v("关于为何 "),n("code",[a._v("sync.map")]),a._v(" 没有 Len 方法，参考资料里给出了 "),n("a",{attrs:{href:"https://github.com/golang/go/issues/20680",target:"_blank",rel:"noopener noreferrer"}},[a._v("issue"),n("OutboundLink")],1),a._v("，"),n("code",[a._v("bcmills")]),a._v(" 认为对于并发的数据结构和非并发的数据结构并不一定要有相同的方法。例如，map 有 Len 方法，sync.map 却不一定要有。就像 sync.map 有 LoadOrStore 方法，map 就没有一样。")])]),a._v(" "),n("li",[n("p",[a._v("有些实现增加了一个计数器，并原子地增加或减少它，以此来表示 sync.map 中元素的个数。但 "),n("code",[a._v("bcmills")]),a._v(" 提出这会引入竞争："),n("code",[a._v("atomic")]),a._v(" 并不是 "),n("code",[a._v("contention-free")]),a._v(" 的，它只是把竞争下沉到了 CPU 层级。这会给其他不需要 Len 方法的场景带来负担。")])])]),a._v(" "),n("h2",{attrs:{id:"简单理解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简单理解"}},[a._v("#")]),a._v(" 简单理解")]),a._v(" "),n("ol",[n("li",[a._v("空间换时间。 通过冗余的两个数据结构(read、dirty),实现加锁对性能的影响。")]),a._v(" "),n("li",[a._v("使用只读数据(read)，避免读写冲突。")]),a._v(" "),n("li",[a._v("动态调整，miss次数多了之后，将dirty数据提升为read。")]),a._v(" "),n("li",[a._v("double-checking。")]),a._v(" "),n("li",[a._v("延迟删除。 删除一个键值只是打标记，只有在提升dirty的时候才清理删除的数据。")]),a._v(" "),n("li",[a._v("优先从read读取、更新、删除，因为对read的读取不需要锁。")])]),a._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),n("ol",[n("li",[n("code",[a._v("sync.map")]),a._v(" 是线程安全的，读取，插入，删除也都保持着常数级的时间复杂度。")]),a._v(" "),n("li",[a._v("通过读写分离，降低锁时间来提高效率，适用于读多写少的场景。")]),a._v(" "),n("li",[a._v("Range 操作需要提供一个函数，参数是 "),n("code",[a._v("k,v")]),a._v("，返回值是一个布尔值："),n("code",[a._v("f func(key, value interface{}) bool")]),a._v("。")]),a._v(" "),n("li",[a._v("调用 Load 或 LoadOrStore 函数时，如果在 read 中没有找到 key，则会将 misses 值原子地增加 1，当 misses 增加到和 dirty 的长度相等时，会将 dirty 提升为 read。以期减少“读 miss”。")]),a._v(" "),n("li",[a._v("新写入的 key 会保存到 dirty 中，如果这时 dirty 为 nil，就会先新创建一个 dirty，并将 read 中未被删除的元素拷贝到 dirty。")]),a._v(" "),n("li",[a._v("当 dirty 为 nil 的时候，read 就代表 map 所有的数据；当 dirty 不为 nil 的时候，dirty 才代表 map 所有的数据。")])])])}),[],!1,null,null,null);n.default=t.exports}}]);